.TH I3STATUS-RS 1 2021-05-09
.SH NAME
i3status-rs \- Generates a status line for
.BR i3bar (1)-compatible
bars
.SH SYNOPSIS
.B i3status-rs
.RB [ OPTIONS ]
.RI [ CONFIGFILE ]
.SH DESCRIPTION
A feature-rich and resource-friendly replacement for
.BR i3status (1),
written in Rust. The
.B i3status-rs
program writes a stream of configurable \*(lqblocks\*(rq of system information
(time, battery status, volume, etc.) to standard output in the JSON format
understood by
.BR i3bar (1)
and
.BR sway-bar (5).
.SH OPTIONS
.TP
.B \-h, \--help
Print help message and exit.
.TP
.B \-V, \--version
Print version information and exit.
.TP
.B \--never-pause
Ignore any attempts by i3 to pause the bar when hidden/fullscreen
.TP
.B \--exit-on-error
Exit rather than printing errors to the bar and continuing. Useful for debugging
in the console.
.TP
.I CONFIGFILE
Read the configuration from this file. Otherwise, we fall back on
$XDG_CONFIG_HOME/i3status-rust/config.toml.
.SH CONFIGURATION
.B i3status-rs
uses a TOML-based format for specifying an array of \*(lqblocks\*(rq. There are
also a small number of top-level theme and icon settings. A simple configuration
might look as follows:
.PP
.EX
  theme = "solarized-dark"
  icons = "awesome"

  [[block]]
  block = "cpu"
  interval = 1

  [[block]]
  block = "load"
  interval = 1
  format = "{1m}"

  [[block]]
  block = "sound"
.EE
.PP
For available blocks, see
.BR BLOCKS .
For theme and icon configuration, see
.BR THEMES.
.SH BLOCKS

.SS Apt
.PP
Creates a block which displays the pending updates available for your
Debian/Ubuntu based system.
.PP
Behind the scenes this uses \f[V]apt\f[R], and in order to run it
without root privileges i3status-rust will create its own package
database in \f[V]/tmp/i3rs-apt/\f[R] which may take up several MB or
more.
If you have a custom apt config then this block may not work as expected
- in that case please open an issue.
.PP
Tip: You can grab the list of available updates using
\f[V]APT_CONFIG=/tmp/i3rs-apt/apt.conf apt list --upgradable\f[R]
.SS Examples
.PP
Update the list of pending updates every thirty minutes (1800 seconds):
.IP
.nf
\f[C]
[[block]]
block = \[dq]apt\[dq]
interval = 1800
format = \[dq]{count:1} updates available\[dq]
format_singular = \[dq]{count:1} update available\[dq]
format_up_to_date = \[dq]system up to date\[dq]
critical_updates_regex = \[dq](linux|linux-lts|linux-zen)\[dq]
# shows dmenu with cached available updates. Any dmenu alternative should also work.
on_click = \[dq]APT_CONFIG=/tmp/i3rs-apt/apt.conf apt list --upgradable | tail -n +2 | rofi -dmenu\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]interval\f[R]
T}@T{
Update interval in seconds.
T}@T{
No
T}@T{
\f[V]600\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{count:1}\[dq]\f[R]
T}
T{
\f[V]format_singular\f[R]
T}@T{
Same as \f[V]format\f[R], but for when exactly one update is available.
T}@T{
No
T}@T{
\f[V]\[dq]{count:1}\[dq]\f[R]
T}
T{
\f[V]format_up_to_date\f[R]
T}@T{
Same as \f[V]format\f[R], but for when no updates are available.
T}@T{
No
T}@T{
\f[V]\[dq]{count:1}\[dq]\f[R]
T}
T{
\f[V]warning_updates_regex\f[R]
T}@T{
Display block as warning if updates matching regex are available.
T}@T{
No
T}@T{
\f[V]None\f[R]
T}
T{
\f[V]critical_updates_regex\f[R]
T}@T{
Display block as critical if updates matching regex are available.
T}@T{
No
T}@T{
\f[V]None\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
l l l.
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{count}\f[R]
T}@T{
Number of updates available
T}@T{
Integer
T}
.TE
.SS Notes
.PP
The number one in \f[V]{count:1}\f[R] sets the minimal width to one
character.
.SS Icons Used
.IP \[bu] 2
\f[V]update\f[R]
.SS Backlight
.PP
Creates a block to display screen brightness.
This is a simplified version of the Xrandr block that reads brightness
information directly from the filesystem, so it works under Wayland.
The block uses \f[V]inotify\f[R] to listen for changes in the
device\[cq]s brightness directly, so there is no need to set an update
interval.
.PP
When there is no \f[V]device\f[R] specified, this block will display
information from the first device found in the
\f[V]/sys/class/backlight\f[R] directory.
If you only have one display, this approach should find it correctly.
.PP
It is possible to set the brightness using this block as well \[en] see
below for details.
.SS Examples
.PP
Show brightness for a specific device:
.IP
.nf
\f[C]
[[block]]
block = \[dq]backlight\[dq]
device = \[dq]intel_backlight\[dq]
\f[R]
.fi
.PP
Show brightness for the default device:
.IP
.nf
\f[C]
[[block]]
block = \[dq]backlight\[dq]
\f[R]
.fi
.PP
Setup bounds and cycle:
.IP
.nf
\f[C]
[[block]]
block = \[dq]backlight\[dq]
minimum = 15
maximum = 100
cycle = [100, 50, 0, 50]
\f[R]
.fi
.PP
Note that \f[V]cycle = []\f[R] will disable cycling, and
\f[V]cycle = [n]\f[R] will reset brightness to \f[V]n\f[R] on each click
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]device\f[R]
T}@T{
The \f[V]/sys/class/backlight\f[R] device to read brightness information
from.
T}@T{
No
T}@T{
Default device
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{brightness}\[dq]\f[R]
T}
T{
\f[V]step_width\f[R]
T}@T{
The brightness increment to use when scrolling, in percent.
T}@T{
No
T}@T{
\f[V]5\f[R]
T}
T{
\f[V]minimum\f[R]
T}@T{
The minimum brightness that can be scrolled down to
T}@T{
No
T}@T{
\f[V]1\f[R]
T}
T{
\f[V]maximum\f[R]
T}@T{
The maximum brightness that can be scrolled up to
T}@T{
No
T}@T{
\f[V]100\f[R]
T}
T{
\f[V]cycle\f[R]
T}@T{
The brightnesses to cycle through on each click
T}@T{
No
T}@T{
\f[V][minimum, maximum]\f[R]
T}
T{
\f[V]root_scaling\f[R]
T}@T{
Scaling exponent reciprocal (ie.
root).
T}@T{
No
T}@T{
\f[V]1.0\f[R]
T}
T{
\f[V]invert_icons\f[R]
T}@T{
Invert icons\[cq] ordering, useful if you have colorful emoji.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
.TE
.PP
Some devices expose raw values that are best handled with nonlinear
scaling.
The human perception of lightness is close to the cube root of relative
luminance, so settings for \f[V]root_scaling\f[R] between 2.4 and 3.0
are worth trying.
For devices with few discrete steps this should be 1.0 (linear).
More information: <https://en.wikipedia.org/wiki/Lightness>
.PP
Also be aware that some devices turn off when brightness is set to
\f[V]0\f[R].
Be careful when setting \f[V]minimum\f[R] to 0.
.SS Available Format Keys
.PP
.TS
tab(@);
l l l.
T{
Placeholder
T}@T{
Description
T}@T{
Type
T}
_
T{
\f[V]{brightness}\f[R]
T}@T{
Device brightness percentage
T}@T{
String or Integer
T}
.TE
.SS Setting Brightness with the Mouse Wheel
.PP
The block allows for setting brightness with the mouse wheel and
toggling min/max brightness on click.
However, depending on how you installed i3status-rust, it may not have
the appropriate permissions to modify these files, and will fail
silently.
To remedy this you can write a \f[V]udev\f[R] rule for your system (if
you are comfortable doing so).
.PP
First, check that your user is a member of the \[lq]video\[rq] group
using the \f[V]groups\f[R] command.
Then add a rule in the \f[V]/etc/udev/rules.d/\f[R] directory containing
the following, for example in \f[V]backlight.rules\f[R]:
.IP
.nf
\f[C]
ACTION==\[dq]add\[dq], SUBSYSTEM==\[dq]backlight\[dq], GROUP=\[dq]video\[dq], MODE=\[dq]0664\[dq]
\f[R]
.fi
.PP
This will allow the video group to modify all backlight devices.
You will also need to restart for this rule to take effect.
.SS Icons Used
.IP \[bu] 2
\f[V]backlight_empty\f[R] (when brightness between 0 and 6%)
.IP \[bu] 2
\f[V]backlight_1\f[R] (when brightness between 7 and 13%)
.IP \[bu] 2
\f[V]backlight_2\f[R] (when brightness between 14 and 20%)
.IP \[bu] 2
\f[V]backlight_3\f[R] (when brightness between 21 and 26%)
.IP \[bu] 2
\f[V]backlight_4\f[R] (when brightness between 27 and 33%)
.IP \[bu] 2
\f[V]backlight_5\f[R] (when brightness between 34 and 40%)
.IP \[bu] 2
\f[V]backlight_6\f[R] (when brightness between 41 and 46%)
.IP \[bu] 2
\f[V]backlight_7\f[R] (when brightness between 47 and 53%)
.IP \[bu] 2
\f[V]backlight_8\f[R] (when brightness between 54 and 60%)
.IP \[bu] 2
\f[V]backlight_9\f[R] (when brightness between 61 and 67%)
.IP \[bu] 2
\f[V]backlight_10\f[R] (when brightness between 68 and 73%)
.IP \[bu] 2
\f[V]backlight_11\f[R] (when brightness between 74 and 80%)
.IP \[bu] 2
\f[V]backlight_12\f[R] (when brightness between 81 and 87%)
.IP \[bu] 2
\f[V]backlight_13\f[R] (when brightness between 88 and 93%)
.IP \[bu] 2
\f[V]backlight_full\f[R] (when brightness above 94%)
.SS Battery
.PP
Creates a block which displays the current battery state (Full, Charging
or Discharging), percentage charged and estimate time until
(dis)charged.
.PP
The battery block collapses when the battery is fully charged \[en] or,
in the case of some Thinkpad batteries, when it reports \[lq]Not
charging\[rq].
.PP
The battery block supports reading charging and status information from
either \f[V]sysfs\f[R],
apcaccess (http://www.apcaccess.org/manual/manual.html#nis-server-client-configuration-using-the-net-driver),
or the UPower (https://upower.freedesktop.org/) D-Bus interface.
These \[lq]drivers\[rq] have largely identical features, but UPower does
include support for \f[V]device = \[dq]DisplayDevice\[dq]\f[R], which
treats all physical power sources as a single logical battery.
This is particularly useful if your system has multiple batteries.
.SS Examples
.PP
Update the battery state every ten seconds, and show the time remaining
until (dis)charging is complete:
.IP
.nf
\f[C]
[[block]]
block = \[dq]battery\[dq]
interval = 10
format = \[dq]{percentage} {time}\[dq]
\f[R]
.fi
.PP
Same as previous, but also prints a six character bar.
.IP
.nf
\f[C]
[[block]]
block = \[dq]battery\[dq]
interval = 10
format = \[dq]{percentage:6#100} {percentage} {time}\[dq]
\f[R]
.fi
.PP
Rely on Upower for battery updates and information:
.IP
.nf
\f[C]
[[block]]
block = \[dq]battery\[dq]
driver = \[dq]upower\[dq]
format = \[dq]{percentage} {time}\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]device\f[R]
T}@T{
\f[V]sysfs\f[R]: The device in \f[V]/sys/class/power_supply/\f[R] to
read from.\f[V]apcaccess\f[R]:
IPv4Address/hostname:port\f[V]UPower\f[R]: this can be
\f[V]\[dq]DisplayDevice\[dq]\f[R] or any of the other paths found by
running \f[V]upower --enumerate\f[R].
T}@T{
No
T}@T{
\f[V]sysfs\f[R]: the first battery device found in
\f[V]/sys/class/power_supply\f[R], usually
\[lq]BAT0\[rq].\f[V]apcaccess\f[R]:
\[lq]localhost:3551\[rq]\f[V]upower\f[R]:
\f[V]DisplayDevice\[ga]\[ga]\f[R]driver\f[V]| One of\f[R]\[lq]sysfs\[rq]\f[V],\f[R]\[lq]apcaccess\[rq]\f[V], or\f[R]\[lq]upower\[rq]\f[V]. | No |\f[R]\[lq]sysfs\[rq]\f[V]\f[R]interval\f[V]| Update interval, in seconds. Only relevant for\f[R]driver
= \[lq]sysfs\[rq] ||
\[lq]apcaccess\[rq]\f[V]. | No |\f[R]10\f[V]\f[R]format\f[V]| A string to customise the output of this block. See below for available placeholders. Text may need to be escaped, refer to [Escaping Text](#escaping-text). | No |\f[R]\[lq]{percentage}\[rq]\f[V]\f[R]full_format\f[V]| Same as\f[R]format\f[V]but for when the battery is full. | No |\f[R]\[lq]{percentage}\[rq]\f[V]\f[R]missing_format\f[V]| Same as\f[R]format\f[V]but for when the specified battery is missing. | No |\f[R]\[lq]{percentage}\[rq]\f[V]\f[R]allow_missing\f[V]| Don\[aq]t display errors when the battery cannot be found. | No |\f[R]false\f[V]\f[R]hide_missing\f[V]| Completely hide this block if the battery cannot be found. Only works in combination with\f[R]allow_missing\f[V]. | No |\f[R]false\f[V]\f[R]full_threshold\f[V]| Percentage at which the battery is considered full (\f[R]full_format\f[V]shown) | No |\f[R]100\f[V]\f[R]good\f[V]| Minimum battery level, where state is set to good. | No |\f[R]60\f[V]\f[R]info\f[V]| Minimum battery level, where state is set to info. | No |\f[R]60\f[V]\f[R]warning\f[V]| Minimum battery level, where state is set to warning. | No |\f[R]30\f[V]\f[R]critical\f[V]| Minimum battery level, where state is set to critical. | No |\f[R]15\[ga]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(28.0n) lw(30.3n) lw(11.7n).
T{
Placeholder
T}@T{
Description
T}@T{
Type
T}
_
T{
\f[V]{percentage}\f[R]
T}@T{
Battery level, in percent
T}@T{
String or Integer
T}
T{
\f[V]{time}\f[R]
T}@T{
Time remaining until (dis)charge is complete
T}@T{
String
T}
T{
\f[V]{power}\f[R]
T}@T{
Power consumption by the battery or from the power supply when charging
T}@T{
String or Float
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]bat_charging\f[R]
.IP \[bu] 2
\f[V]bat_not_available\f[R]
.IP \[bu] 2
\f[V]bat_empty\f[R] (charge between 0 and 5%)
.IP \[bu] 2
\f[V]bat_quarter\f[R] (charge between 6 and 25%)
.IP \[bu] 2
\f[V]bat_half\f[R] (charge between 26 and 50%)
.IP \[bu] 2
\f[V]bat_three_quarters\f[R] (charge between 51 and 75%)
.IP \[bu] 2
\f[V]bat_full\f[R] (charge over 75%)
.SS Bluetooth
.PP
Creates a block which displays the connectivity of a given Bluetooth
device, or the battery level if this is supported.
Relies on the Bluez D-Bus API, and is therefore asynchronous.
.PP
When the device can be identified as an audio headset, a keyboard,
joystick, or mouse, use the relevant icon.
Otherwise, fall back on the generic Bluetooth symbol.
.PP
Right-clicking the block will attempt to connect (or disconnect) the
device.
.SS Examples
.PP
A block for a Bluetooth device with the given MAC address:
.IP
.nf
\f[C]
[[block]]
block = \[dq]bluetooth\[dq]
mac = \[dq]A0:8A:F5:B8:01:FD\[dq]
format = \[dq]Rowkin {percentage}\[dq]
format_unavailable = \[dq]Rowkin x\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]mac\f[R]
T}@T{
MAC address of the Bluetooth device.
T}@T{
Yes
T}@T{
None
T}
T{
\f[V]hide_disconnected\f[R]
T}@T{
Hides the block when the device is disconnected.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{label} {percentage}\[dq]\f[R]
T}
T{
\f[V]format_unavailable\f[R]
T}@T{
A string to customise the output of this block when the bluetooth
controller is unavailable.
See below for placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{label} x\[dq]\f[R]
T}
.TE
.SS Deprecated Options
.PP
.TS
tab(@);
l l l l.
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]label\f[R]
T}@T{
Text label to display next to the icon.
T}@T{
No
T}@T{
None
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(16.5n) lw(28.8n) lw(24.7n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{percentage}\f[R]
T}@T{
Device\[cq]s charge in percents
T}@T{
Integer or an empty String
T}
.TE
.SS Deprecated Format Keys
.PP
.TS
tab(@);
l l.
T{
Key
T}@T{
Value
T}
_
T{
\f[V]{label}\f[R]
T}@T{
Device label as set in the block config
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]headphones\f[R] for bluetooth devices identifying as
\[lq]audio-card\[rq]
.IP \[bu] 2
\f[V]joystick\f[R] for bluetooth devices identifying as
\[lq]input-gaming\[rq]
.IP \[bu] 2
\f[V]keyboard\f[R] for bluetooth devices identifying as
\[lq]input-keyboard\[rq]
.IP \[bu] 2
\f[V]mouse\f[R] for bluetooth devices identifying as
\[lq]input-mouse\[rq]
.IP \[bu] 2
\f[V]bluetooth\f[R] for all other devices
.SS CPU Utilization
.PP
Creates a block which displays the overall CPU utilization, calculated
from \f[V]/proc/stat\f[R].
.SS Examples
.PP
Update CPU usage every second:
.IP
.nf
\f[C]
[[block]]
block = \[dq]cpu\[dq]
interval = 1
format = \[dq]{barchart} {utilization} {frequency}\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]info\f[R]
T}@T{
Minimum usage, where state is set to info.
T}@T{
No
T}@T{
\f[V]30\f[R]
T}
T{
\f[V]warning\f[R]
T}@T{
Minimum usage, where state is set to warning.
T}@T{
No
T}@T{
\f[V]60\f[R]
T}
T{
\f[V]critical\f[R]
T}@T{
Minimum usage, where state is set to critical.
T}@T{
No
T}@T{
\f[V]90\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
T}@T{
No
T}@T{
\f[V]1\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{utilization}\[dq]\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
l l l.
T{
Placeholder
T}@T{
Description
T}@T{
Type
T}
_
T{
\f[V]{barchart}\f[R]
T}@T{
Bar chart of each CPU\[cq]s core utilization
T}@T{
String
T}
T{
\f[V]{utilization}\f[R]
T}@T{
Average CPU utilization in percent
T}@T{
Integer
T}
T{
\f[V]{utilization<n>}\f[R]
T}@T{
CPU utilization in percent for core \f[V]n\f[R]
T}@T{
Integer
T}
T{
\f[V]{frequency}\f[R]
T}@T{
CPU frequency
T}@T{
Float
T}
T{
\f[V]{frequency<n>}\f[R]
T}@T{
CPU frequency in GHz for core \f[V]n\f[R]
T}@T{
Float
T}
T{
\f[V]{boost}\f[R]
T}@T{
CPU turbo boost status
T}@T{
String
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]cpu\f[R]
.IP \[bu] 2
\f[V]cpu_boost_on\f[R]
.IP \[bu] 2
\f[V]cpu_boost_off\f[R]
.SS Custom
.PP
Creates a block that display the output of custom shell commands.
.PP
For further customisation, use the \f[V]json\f[R] option and have the
shell command output valid JSON in the schema below:
.PD 0
.P
.PD
\f[V]{\[dq]icon\[dq]: \[dq]ICON\[dq], \[dq]state\[dq]: \[dq]STATE\[dq], \[dq]text\[dq]: \[dq]YOURTEXT\[dq]}\f[R]
.PD 0
.P
.PD
\f[V]icon\f[R] is optional, it may be an icon name from
\f[V]icons.rs\f[R] (default \[lq]\[lq])
.PD 0
.P
.PD
\f[V]state\f[R] is optional, it may be Idle, Info, Good, Warning,
Critical (default Idle)
.PP
See
\f[V]examples\f[R] (https://github.com/greshake/i3status-rust/blob/master/examples/README.md)
for a list of how many functionalities can be easily achieved using the
\f[V]custom\f[R] block.
.SS Examples
.PP
Display temperature, update every 10 seconds:
.IP
.nf
\f[C]
[[block]]
block = \[dq]custom\[dq]
command = \[aq]\[aq]\[aq] cat /sys/class/thermal/thermal_zone0/temp | awk \[aq]{printf(\[dq]%.1f\[rs]n\[dq],$1/1000)}\[aq] \[aq]\[aq]\[aq]
\f[R]
.fi
.PP
Cycle between \[lq]ON\[rq] and \[lq]OFF\[rq], update every 1 second, run
\f[V]<command>\f[R] when block is clicked:
.IP
.nf
\f[C]
[[block]]
block = \[dq]custom\[dq]
cycle = [\[dq]echo ON\[dq], \[dq]echo OFF\[dq]]
on_click = \[dq]<command>\[dq]
interval = 1
\f[R]
.fi
.PP
Use JSON output:
.IP
.nf
\f[C]
[[block]]
block = \[dq]custom\[dq]
command = \[dq]echo \[aq]{\[rs]\[dq]icon\[rs]\[dq]:\[rs]\[dq]weather_thunder\[rs]\[dq],\[rs]\[dq]state\[rs]\[dq]:\[rs]\[dq]Critical\[rs]\[dq], \[rs]\[dq]text\[rs]\[dq]: \[rs]\[dq]Danger!\[rs]\[dq]}\[aq]\[dq]
json = true
\f[R]
.fi
.PP
Display kernel, update the block only once:
.IP
.nf
\f[C]
[[block]]
block = \[dq]custom\[dq]
command = \[dq]uname -r\[dq]
interval = \[dq]once\[dq]
\f[R]
.fi
.PP
Display the screen brightness on an intel machine and update this only
when \f[V]pkill -SIGRTMIN+4 i3status-rs\f[R] is called:
.IP
.nf
\f[C]
[[block]]
block = \[dq]custom\[dq]
command = \[aq]\[aq]\[aq] cat /sys/class/backlight/intel_backlight/brightness | awk \[aq]{print $1}\[aq] \[aq]\[aq]\[aq]
signal = 4
interval = \[dq]once\[dq]
\f[R]
.fi
.PP
Update block when one or more specified files are modified:
.IP
.nf
\f[C]
[[block]]
block = \[dq]custom\[dq]
command = \[dq]cat \[ti]/custom_status\[dq]
watch_files = [\[dq]\[ti]/custom_status\[dq]]
interval = \[dq]once\[dq]
\f[R]
.fi
.SS Options
.PP
Note that \f[V]command\f[R] and \f[V]cycle\f[R] are mutually exclusive.
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]command\f[R]
T}@T{
Shell command to execute & display.
Shell command output may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
None
T}
T{
\f[V]on_click\f[R]
T}@T{
Command to execute when the button is clicked.
T}@T{
No
T}@T{
None
T}
T{
\f[V]cycle\f[R]
T}@T{
Commands to execute and change when the button is clicked.
T}@T{
No
T}@T{
None
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds (or \f[V]\[dq]once\[dq]\f[R] to update only
once).
T}@T{
No
T}@T{
\f[V]10\f[R]
T}
T{
\f[V]json\f[R]
T}@T{
Use JSON from command output to format the block.
If the JSON is not valid, the block will error out.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]signal\f[R]
T}@T{
Signal value that causes an update for this block with 0 corresponding
to \f[V]-SIGRTMIN+0\f[R] and the largest value being
\f[V]-SIGRTMAX\f[R].
T}@T{
No
T}@T{
None
T}
T{
\f[V]watch_files\f[R]
T}@T{
Watch files to trigger update on file modification
T}@T{
No
T}@T{
None
T}
T{
\f[V]hide_when_empty\f[R]
T}@T{
Hides the block when the command output (or json text field) is empty.
T}@T{
No
T}@T{
false
T}
T{
\f[V]shell\f[R]
T}@T{
Specify the shell to use when running commands.
T}@T{
No
T}@T{
\f[V]$SHELL\f[R] if set, otherwise fallback to \f[V]sh\f[R]
T}
.TE
.SS Custom DBus
.PP
Creates a block that can be updated asynchronously using DBus.
.PP
For example, updating the block using command line tools:
.PD 0
.P
.PD
busctl:
.PD 0
.P
.PD
\f[V]busctl --user call i3.status.rs /CurrentSoundDevice i3.status.rs SetStatus sss Headphones music Good\f[R]
.PD 0
.P
.PD
or
.PD 0
.P
.PD
\f[V]busctl --user call i3.status.rs /CurrentSoundDevice i3.status.rs SetStatus s Headphones\f[R]
.PP
qdbus:
\f[V]qdbus i3.status.rs /CurrentSoundDevice i3.status.rs.SetStatus Headphones music Good\f[R].
.PP
The first argument is the text content of the block, the second
(optional) argument is the icon to use (as found in \f[V]icons.rs\f[R];
default \f[V]\[dq]\[dq]\f[R]), and the third (optional) argument is the
state (one of Idle, Info, Good, Warning, or Critical; default Idle).
.PP
Note that the text you set may need to be escaped, refer to Escaping
Text.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]custom_dbus\[dq]
name = \[dq]CurrentSoundDevice\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]name\f[R]
T}@T{
Name of the DBus object that i3status-rs will create.
Must be unique.
T}@T{
Yes
T}@T{
None
T}
.TE
.SS Disk Space
.PP
Creates a block which displays disk space information.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]disk_space\[dq]
path = \[dq]/\[dq]
info_type = \[dq]used\[dq]
format = \[dq]{icon} {used}/{total} ({available} free)\[dq]
\f[R]
.fi
.PP
Same as previous, but the block will change it\[cq]s state to
\[lq]warning\[rq] if more than 40GB of disk space is used and to
\[lq]alert\[rq] if more than 50GB is used.
.IP
.nf
\f[C]
[[block]]
block = \[dq]disk_space\[dq]
path = \[dq]/\[dq]
info_type = \[dq]used\[dq]
format = \[dq]{icon} {used}/{total} ({available} free)\[dq]
alert_absolute = true
unit = \[dq]GB\[dq]
alert = 50
warning = 40
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]alert\f[R]
T}@T{
Available disk space critical level as a percentage or Unit.
T}@T{
No
T}@T{
\f[V]10.0\f[R]
T}
T{
\f[V]warning\f[R]
T}@T{
Available disk space warning level as a percentage or Unit.
T}@T{
No
T}@T{
\f[V]20.0\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{available}\[dq]\f[R]
T}
T{
\f[V]info_type\f[R]
T}@T{
Currently supported options are \f[V]\[dq]available\[dq]\f[R],
\f[V]\[dq]free\[dq]\f[R], and \f[V]\[dq]used\[dq]\f[R] (sets value for
alert and percentage calculation).
T}@T{
No
T}@T{
\f[V]\[dq]available\[dq]\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
T}@T{
No
T}@T{
\f[V]20\f[R]
T}
T{
\f[V]path\f[R]
T}@T{
Path to collect information from.
T}@T{
No
T}@T{
\f[V]\[dq]/\[dq]\f[R]
T}
T{
\f[V]unit\f[R]
T}@T{
Unit that is used when \f[V]alert_absolute\f[R] is set for
\f[V]warning\f[R] and \f[V]alert\f[R].
Options are \f[V]\[dq]B\[dq]\f[R], \f[V]\[dq]KB\[dq]\f[R]
\f[V]\[dq]MB\[dq]\f[R], \f[V]\[dq]GB\[dq]\f[R], \f[V]\[dq]TB\[dq]\f[R].
T}@T{
No
T}@T{
\f[V]\[dq]GB\[dq]\f[R]
T}
T{
\f[V]alert_absolute\f[R]
T}@T{
Use Unit values for warning and alert instead of percentages.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
.TE
.SS Deprecated Options
.PP
.TS
tab(@);
l l l l.
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]alias\f[R]
T}@T{
Sets the value for \f[V]{alias}\f[R] placeholder
T}@T{
No
T}@T{
\f[V]\[dq]/\[dq]\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(15.6n) lw(27.2n) lw(27.2n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{available}\f[R]
T}@T{
Available disk space (free disk space minus reserved system space)
T}@T{
Float
T}
T{
\f[V]{free}\f[R]
T}@T{
Free disk space
T}@T{
Float
T}
T{
\f[V]{icon}\f[R]
T}@T{
Disk drive icon
T}@T{
String
T}
T{
\f[V]{path}\f[R]
T}@T{
Path used for capacity check
T}@T{
String
T}
T{
\f[V]{percentage}\f[R]
T}@T{
Percentage of disk used or free (depends on info_type setting)
T}@T{
Float
T}
T{
\f[V]{total}\f[R]
T}@T{
Total disk space
T}@T{
Float
T}
T{
\f[V]{used}\f[R]
T}@T{
Used disk space
T}@T{
Float
T}
.TE
.SS Deprecated Format Keys
.PP
.TS
tab(@);
l l l.
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{alias}\f[R]
T}@T{
The value of \f[V]alias\f[R] option
T}@T{
String
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]disk_drive\f[R]
.SS Dnf
.PP
Creates a block which displays the pending updates available for your
Fedora system.
.SS Examples
.PP
Update the list of pending updates every thirty minutes (1800 seconds):
.IP
.nf
\f[C]
[[block]]
block = \[dq]dnf\[dq]
interval = 1800
format = \[dq]{count:1} updates available\[dq]
format_singular = \[dq]{count:1} update available\[dq]
format_up_to_date = \[dq]system up to date\[dq]
critical_updates_regex = \[dq](linux|linux-lts|linux-zen)\[dq]
# shows dmenu with cached available updates. Any dmenu alternative should also work.
on_click = \[dq]dnf list -q --upgrades | tail -n +2 | rofi -dmenu\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]interval\f[R]
T}@T{
Update interval in seconds.
T}@T{
No
T}@T{
\f[V]600\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{count:1}\[dq]\f[R]
T}
T{
\f[V]format_singular\f[R]
T}@T{
Same as \f[V]format\f[R], but for when exactly one update is available.
T}@T{
No
T}@T{
\f[V]\[dq]{count:1}\[dq]\f[R]
T}
T{
\f[V]format_up_to_date\f[R]
T}@T{
Same as \f[V]format\f[R], but for when no updates are available.
T}@T{
No
T}@T{
\f[V]\[dq]{count:1}\[dq]\f[R]
T}
T{
\f[V]warning_updates_regex\f[R]
T}@T{
Display block as warning if updates matching regex are available.
T}@T{
No
T}@T{
\f[V]None\f[R]
T}
T{
\f[V]critical_updates_regex\f[R]
T}@T{
Display block as critical if updates matching regex are available.
T}@T{
No
T}@T{
\f[V]None\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
l l l.
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{count}\f[R]
T}@T{
Number of updates available
T}@T{
Integer
T}
.TE
.SS Notes
.PP
The number one in \f[V]{count:1}\f[R] sets the minimal width to one
character.
.SS Icons Used
.IP \[bu] 2
\f[V]update\f[R]
.SS Docker
.PP
Creates a block which shows the local docker daemon status (containers
running, paused, stopped, total and image count).
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]docker\[dq]
interval = 2
format = \[dq]{running}/{total}\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
T}@T{
No
T}@T{
\f[V]5\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{running}\[dq]\f[R]
T}
T{
\f[V]socket_path\f[R]
T}@T{
The path to the docker socket.
T}@T{
No
T}@T{
\f[V]\[dq]/var/run/docker.sock\[dq]\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
l l l.
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{total}\f[R]
T}@T{
Total containers on the host
T}@T{
Integer
T}
T{
\f[V]{running}\f[R]
T}@T{
Containers running on the host
T}@T{
Integer
T}
T{
\f[V]{stopped}\f[R]
T}@T{
Containers stopped on the host
T}@T{
Integer
T}
T{
\f[V]{paused}\f[R]
T}@T{
Containers paused on the host
T}@T{
Integer
T}
T{
\f[V]{images}\f[R]
T}@T{
Total images on the host
T}@T{
Integer
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]docker\f[R]
.SS ExternalIP
.PP
Creates a block which displays the external IP address and various
information about it.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]external_ip\[dq]
format = \[dq]{ip} {country_code}\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{address} {country_flag}\[dq]\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
Interval in seconds for automatic updates when the previous update was
successful
T}@T{
No
T}@T{
300
T}
T{
\f[V]error_interval\f[R]
T}@T{
Interval in seconds for automatic updates when the previous update
failed
T}@T{
No
T}@T{
15
T}
T{
\f[V]with_network_manager\f[R]
T}@T{
If `true', listen for NetworkManager events and update the IP
immediately if there was a change
T}@T{
No
T}@T{
\[lq]true\[rq]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{ip}\f[R]
T}@T{
The external IP address, as seen from a remote server
T}@T{
String
T}
T{
\f[V]{version}\f[R]
T}@T{
IPv4 or IPv6
T}@T{
String
T}
T{
\f[V]{city}\f[R]
T}@T{
City name, such as \[lq]San Francisco\[rq]
T}@T{
Integer
T}
T{
\f[V]{region}\f[R]
T}@T{
Region name, such as \[lq]California\[rq]
T}@T{
String
T}
T{
\f[V]{region_code}\f[R]
T}@T{
Region code, such as \[lq]CA\[rq] for California
T}@T{
String
T}
T{
\f[V]{country}\f[R]
T}@T{
Country code (2 letter, ISO 3166-1 alpha-2)
T}@T{
String
T}
T{
\f[V]{country_name}\f[R]
T}@T{
Short country name
T}@T{
String
T}
T{
\f[V]{country_code}\f[R]
T}@T{
Country code (2 letter, ISO 3166-1 alpha-2)
T}@T{
String
T}
T{
\f[V]{country_code_iso3}\f[R]
T}@T{
Country code (3 letter, ISO 3166-1 alpha-3)
T}@T{
String
T}
T{
\f[V]{country_capital}\f[R]
T}@T{
Capital of the country
T}@T{
String
T}
T{
\f[V]{country_tld}\f[R]
T}@T{
Country specific TLD (top-level domain)
T}@T{
String
T}
T{
\f[V]{continent_code}\f[R]
T}@T{
Continent code
T}@T{
String
T}
T{
\f[V]{in_eu}\f[R]
T}@T{
Region code, such as \[lq]CA\[rq]
T}@T{
String
T}
T{
\f[V]{postal}\f[R]
T}@T{
ZIP / Postal code
T}@T{
String
T}
T{
\f[V]{latitude}\f[R]
T}@T{
Latitude
T}@T{
Float
T}
T{
\f[V]{longitude}\f[R]
T}@T{
Longitude
T}@T{
Float
T}
T{
\f[V]{timezone}\f[R]
T}@T{
City
T}@T{
String
T}
T{
\f[V]{utc_offset}\f[R]
T}@T{
UTC offset (with daylight saving time) as +HHMM or -HHMM (HH is hours,
MM is minutes)
T}@T{
String
T}
T{
\f[V]{country_calling_code}\f[R]
T}@T{
Country calling code (dial in code, comma separated)
T}@T{
String
T}
T{
\f[V]{currency}\f[R]
T}@T{
Currency code (ISO 4217)
T}@T{
String
T}
T{
\f[V]{currency_name}\f[R]
T}@T{
Currency name
T}@T{
String
T}
T{
\f[V]{languages}\f[R]
T}@T{
Languages spoken (comma separated 2 or 3 letter ISO 639 code with
optional hyphen separated country suffix)
T}@T{
String
T}
T{
\f[V]{country_area}\f[R]
T}@T{
Area of the country (in sq km)
T}@T{
Float
T}
T{
\f[V]{country_population}\f[R]
T}@T{
Population of the country
T}@T{
Float
T}
T{
\f[V]{timezone}\f[R]
T}@T{
Time zone
T}@T{
String
T}
T{
\f[V]{org}\f[R]
T}@T{
Organization
T}@T{
String
T}
T{
\f[V]{asn}\f[R]
T}@T{
Autonomous system (AS)
T}@T{
String
T}
T{
\f[V]{country_flag}\f[R]
T}@T{
Flag of the country
T}@T{
String (glyph)
T}
.TE
.SS Notes
.PP
All the information comes from https://ipapi.co/json/ Check their
documentation here: https://ipapi.co/api/#complete-location5
.PP
The IP is queried, 1) When i3status-rs starts, 2) When a signal is
received on D-Bus about a network configuration change, 3) Every 5
minutes.
This periodic refresh exists to catch IP updates that don\[cq]t trigger
a notification, for example due to a IP refresh at the router.
.PP
Flags: They are not icons but unicode glyphs.
You will need a font that includes them.
Tested with: https://www.babelstone.co.uk/Fonts/Flags.html
.SS Focused Window
.PP
Creates a block which displays the title or the active marks of the
currently focused window.
Uses push updates from i3 IPC, so no need to worry about resource usage.
The block only updates when the focused window changes title or the
focus changes.
Also works with sway, due to it having compatibility with i3\[cq]s IPC.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]focused_window\[dq]
max_width = 50
show_marks = \[dq]visible\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]max_width\f[R]
T}@T{
Truncates titles to this length.
T}@T{
No
T}@T{
\f[V]21\f[R]
T}
T{
\f[V]show_marks\f[R]
T}@T{
Display marks instead of the title, if there are some.
Options are \f[V]\[dq]none\[dq]\f[R], \f[V]\[dq]all\[dq]\f[R] or
\f[V]\[dq]visible\[dq]\f[R], the latter of which ignores marks that
start with an underscore.
T}@T{
No
T}@T{
\f[V]\[dq]none\[dq]\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
AA string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{combo}\[dq]\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{title}\f[R]
T}@T{
Title
T}@T{
String
T}
T{
\f[V]{marks}\f[R]
T}@T{
Marks
T}@T{
String
T}
T{
\f[V]{combo}\f[R]
T}@T{
Title \f[I]or\f[R] marks depending on whether the title is empty or not
and show_marks is enabled or not
T}@T{
String
T}
.TE
.SS GitHub
.PP
Creates a block which shows the unread notification count for a GitHub
account.
A GitHub personal access token (https://github.com/settings/tokens/new)
with the \[lq]notifications\[rq] scope is required, and must be passed
using the \f[V]I3RS_GITHUB_TOKEN\f[R] environment variable.
Optionally the colour of the block is determined by the highest
notification in the following lists from highest to lowest:
\f[V]critical\f[R],\f[V]warning\f[R],\f[V]info\f[R],\f[V]good\f[R]
.SS Examples
.PP
Display notification counts
.IP
.nf
\f[C]
[[block]]
block = \[dq]github\[dq]
format = \[dq]{total}|{author}|{comment}|{mention}|{review_requested}\[dq]
\f[R]
.fi
.PP
Display number of total notifications, change to info colour if there
are any notifications, and warning colour if there is a mention or
review_requested notification
.IP
.nf
\f[C]
[[block]]
block = \[dq]github\[dq]
format = \[dq]{total}\[dq]
info = [\[dq]total\[dq]]
warning = [\[dq]mention\[dq],\[dq]review_requested\[dq]]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
T}@T{
No
T}@T{
\f[V]30\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
AA string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{total}\[dq]\f[R]
T}
T{
\f[V]api_server\f[R]
T}@T{
API Server URL to use to fetch notifications.
T}@T{
No
T}@T{
\f[V]https://api.github.com\f[R]
T}
T{
\f[V]hide_if_total_is_zero\f[R]
T}@T{
Hide this block if the total count of notifications is zero
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]critical\f[R]
T}@T{
List of notification types that change the block to the critical colour
T}@T{
No
T}@T{
None
T}
T{
\f[V]warning\f[R]
T}@T{
List of notification types that change the block to the warning colour
T}@T{
No
T}@T{
None
T}
T{
\f[V]info\f[R]
T}@T{
List of notification types that change the block to the info colour
T}@T{
No
T}@T{
None
T}
T{
\f[V]good\f[R]
T}@T{
List of notification types that change the block to the good colour
T}@T{
No
T}@T{
None
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{total}\f[R]
T}@T{
Total number of notifications
T}@T{
Integer
T}
T{
\f[V]{assign}\f[R]
T}@T{
Total number of notifications related to issues you\[cq]re assigned on
T}@T{
Integer
T}
T{
\f[V]{author}\f[R]
T}@T{
Total number of notifications related to threads you are the author of
T}@T{
Integer
T}
T{
\f[V]{comment}\f[R]
T}@T{
Total number of notifications related to threads you commented on
T}@T{
Integer
T}
T{
\f[V]{invitation}\f[R]
T}@T{
Total number of notifications related to invitations
T}@T{
Integer
T}
T{
\f[V]{manual}\f[R]
T}@T{
Total number of notifications related to threads you manually subscribed
on
T}@T{
Integer
T}
T{
\f[V]{mention}\f[R]
T}@T{
Total number of notifications related to content you were specifically
mentioned on
T}@T{
Integer
T}
T{
\f[V]{review_requested}\f[R]
T}@T{
Total number of notifications related to PR you were requested to review
T}@T{
Integer
T}
T{
\f[V]{security_alert}\f[R]
T}@T{
Total number of notifications related to security vulnerabilities found
on your repositories
T}@T{
Integer
T}
T{
\f[V]{state_change}\f[R]
T}@T{
Total number of notifications related to thread state change
T}@T{
Integer
T}
T{
\f[V]{subscribed}\f[R]
T}@T{
Total number of notifications related to repositories you\[cq]re
watching
T}@T{
Integer
T}
T{
\f[V]{team_mention}\f[R]
T}@T{
Total number of notification related to thread where your team was
mentioned
T}@T{
Integer
T}
.TE
.PP
For more information about notifications, refer to the GitHub API
documentation (https://developer.github.com/v3/activity/notifications/#notification-reasons).
.SS Icons Used
.IP \[bu] 2
\f[V]github\f[R]
.SS Hueshift
.PP
Creates a block which display the current color temperature in Kelvin.
When scrolling upon the block the color temperature is changed.
A left click on the block sets the color temperature to
\f[V]click_temp\f[R] that is by default to \f[V]6500K\f[R].
A right click completely resets the color temperature to its default
value (\f[V]6500K\f[R]).
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]hueshift\[dq]
hue_shifter = \[dq]redshift\[dq]
step = 50
click_temp = 3500
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]step\f[R]
T}@T{
The step color temperature is in/decreased in Kelvin.
T}@T{
No
T}@T{
\f[V]100\f[R]
T}
T{
\f[V]hue_shifter\f[R]
T}@T{
Program used to control screen color.
T}@T{
No
T}@T{
Detect automatically.
T}
T{
\f[V]max_temp\f[R]
T}@T{
Max color temperature in Kelvin.
T}@T{
No
T}@T{
\f[V]10000\f[R]
T}
T{
\f[V]min_temp\f[R]
T}@T{
Min color temperature in Kelvin.
T}@T{
No
T}@T{
\f[V]1000\f[R]
T}
T{
\f[V]click_temp\f[R]
T}@T{
Left click color temperature in Kelvin.
T}@T{
No
T}@T{
\f[V]6500\f[R]
T}
.TE
.SS Available Hue Shifters
.PP
.TS
tab(@);
l l.
T{
Name
T}@T{
Supports
T}
_
T{
\f[V]\[dq]redshift\[dq]\f[R]
T}@T{
X11
T}
T{
\f[V]\[dq]sct\[dq]\f[R]
T}@T{
X11
T}
T{
\f[V]\[dq]gammastep\[dq]\f[R]
T}@T{
X11 and Wayland
T}
T{
\f[V]\[dq]wlsunset\[dq]\f[R]
T}@T{
Wayland
T}
T{
\f[V]\[dq]wl-gammarelay-rs\[dq]\f[R]
T}@T{
Wayland
T}
T{
\f[V]\[dq]wl-gammarelay\[dq]\f[R]
T}@T{
Wayland
T}
.TE
.PP
A hard limit is set for the \f[V]max_temp\f[R] to \f[V]10000K\f[R] and
the same for the \f[V]min_temp\f[R] which is \f[V]1000K\f[R].
The \f[V]step\f[R] has a hard limit as well, defined to \f[V]500K\f[R]
to avoid too brutal changes.
.SS IBus
.PP
Creates a block which displays the current global engine set in
IBus (https://wiki.archlinux.org/index.php/IBus).
Updates are instant as D-Bus signalling is used.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]ibus\[dq]
\f[R]
.fi
.PP
With optional mappings:
.IP
.nf
\f[C]
[[block]]
block = \[dq]ibus\[dq]
[block.mappings]
\[dq]mozc-jp\[dq] = \[dq]JP\[dq]
\[dq]xkb:us::eng\[dq] = \[dq]EN\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{engine}\[dq]\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
l l l.
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{engine}\f[R]
T}@T{
Engine name as provided by IBus
T}@T{
String
T}
.TE
.SS KDEConnect
.PP
Display info from the currently connected device in KDEConnect, updated
asynchronously.
.PP
Block colours are updated based on the battery level, unless all bat_*
thresholds are set to 0, in which case the block colours will depend on
the notification count instead.
.IP
.nf
\f[C]
[[block]]
block = \[dq]kdeconnect\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]device_id\f[R]
T}@T{
Device ID as per the output of \f[V]kdeconnect --list-devices\f[R].
T}@T{
No
T}@T{
Chooses the first found device, if any.
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{name} {bat_icon}{bat_charge} {notif_icon}{notif_count}\[dq]\f[R]
T}
T{
\f[V]format_disconnected\f[R]
T}@T{
Same as \f[V]format\f[R] but for when the phone is
disconnected/unreachable.
Same placeholders can be used as above, however they will be fixed at
the last known value until the phone comes back online.
T}@T{
No
T}@T{
\f[V]\[dq]{name}\[dq]\f[R]
T}
T{
\f[V]bat_info\f[R]
T}@T{
Min battery level below which state is set to info.
T}@T{
No
T}@T{
\f[V]60\f[R]
T}
T{
\f[V]bat_good\f[R]
T}@T{
Min battery level below which state is set to good.
T}@T{
No
T}@T{
\f[V]60\f[R]
T}
T{
\f[V]bat_warning\f[R]
T}@T{
Min battery level below which state is set to warning.
T}@T{
No
T}@T{
\f[V]30\f[R]
T}
T{
\f[V]bat_critical\f[R]
T}@T{
Min battery level below which state is set to critical.
T}@T{
No
T}@T{
\f[V]15\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{bat_icon}\f[R]
T}@T{
Battery icon which will automatically change between the various battery
icons depending on the current charge state
T}@T{
String
T}
T{
\f[V]{bat_charge}\f[R]
T}@T{
Battery charge level in percent
T}@T{
Integer
T}
T{
\f[V]{bat_state}\f[R]
T}@T{
Battery charging state, \[lq]true\[rq] or \[lq]false\[rq]
T}@T{
String
T}
T{
\f[V]{notif_icon}\f[R]
T}@T{
Will display an icon when you have a notification, otherwise an empty
string
T}@T{
String
T}
T{
\f[V]{notif_count}\f[R]
T}@T{
Number of unread notifications on your phone
T}@T{
Integer
T}
T{
\f[V]{name}\f[R]
T}@T{
Name of your device as reported by KDEConnect
T}@T{
String
T}
T{
\f[V]{id}\f[R]
T}@T{
KDEConnect device ID
T}@T{
String
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]bat_charging\f[R]
.IP \[bu] 2
\f[V]bat_not_available\f[R]
.IP \[bu] 2
\f[V]bat_empty\f[R] (charge between 0 and 5%)
.IP \[bu] 2
\f[V]bat_quarter\f[R] (charge between 6 and 25%)
.IP \[bu] 2
\f[V]bat_half\f[R] (charge between 26 and 50%)
.IP \[bu] 2
\f[V]bat_three_quarters\f[R] (charge between 51 and 75%)
.IP \[bu] 2
\f[V]bat_full\f[R] (charge over 75%)
.IP \[bu] 2
\f[V]notification\f[R]
.IP \[bu] 2
\f[V]phone\f[R]
.IP \[bu] 2
\f[V]phone_disconnected\f[R]
.SS Keyboard Layout
.PP
Creates a block to display the current keyboard layout.
.PP
Four drivers are available: - \f[V]setxkbmap\f[R] which polls setxkbmap
to get the current layout - \f[V]localebus\f[R] which can read
asynchronous updates from the systemd \f[V]org.freedesktop.locale1\f[R]
D-Bus path - \f[V]kbddbus\f[R] which uses
kbdd (https://github.com/qnikst/kbdd) to monitor per-window layout
changes via DBus - \f[V]xkbswitch\f[R] which uses
xkb-switch (https://github.com/grwlf/xkb-switch) to show the current
layout and variant.
This works when \f[V]setxkbmap\f[R] is used to set a comma separated
list of layouts, such as \f[V]us,es,fr\f[R].
- \f[V]sway\f[R] which can read asynchronous updates from the sway IPC
.PP
Which of these methods is appropriate will depend on your system setup.
.SS Examples
.PP
Check \f[V]setxkbmap\f[R] every 15 seconds:
.IP
.nf
\f[C]
[[block]]
block = \[dq]keyboard_layout\[dq]
driver = \[dq]setxkbmap\[dq]
interval = 15
\f[R]
.fi
.PP
Use the \f[V]xkb-switch\f[R] (https://github.com/grwlf/xkb-switch) X11
tool to switch to next \f[V]setxkbmap\f[R] layout on click:
.IP
.nf
\f[C]
[[block]]
block = \[dq]keyboard_layout\[dq]
driver = \[dq]setxkbmap\[dq]
on_click = \[dq]xkb-switch -n\[dq]
interval = 1
\f[R]
.fi
.PP
Listen to D-Bus for changes:
.IP
.nf
\f[C]
[[block]]
block = \[dq]keyboard_layout\[dq]
driver = \[dq]localebus\[dq]
\f[R]
.fi
.PP
Listen to kbdd for changes:
.IP
.nf
\f[C]
[[block]]
block = \[dq]keyboard_layout\[dq]
driver = \[dq]kbddbus\[dq]
\f[R]
.fi
.PP
Poll \f[V]xkb-switch\f[R] for current layout and variant:
.IP
.nf
\f[C]
[[block]]
block = \[dq]keyboard_layout\[dq]
driver = \[dq]xkbswitch\[dq]
on_click = \[dq]xkb-switch -n\[dq]
format = \[dq]{layout} {variant}\[dq]
interval = 1
\f[R]
.fi
.PP
Listen to sway for changes:
.IP
.nf
\f[C]
[[block]]
block = \[dq]keyboard_layout\[dq]
driver = \[dq]sway\[dq]
sway_kb_identifier = \[dq]1133:49706:Gaming_Keyboard_G110\[dq]
\f[R]
.fi
.PP
Listen to sway for changes and override mappings:
.IP
.nf
\f[C]
[[block]]
block = \[dq]keyboard_layout\[dq]
driver = \[dq]sway\[dq]
format = \[dq]{layout}\[dq]
[block.mappings]
\[dq]English (Workman)\[dq] = \[dq]EN\[dq]
\[dq]Russian (N/A)\[dq] = \[dq]RU\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]driver\f[R]
T}@T{
One of \f[V]\[dq]setxkbmap\[dq]\f[R], \f[V]\[dq]localebus\[dq]\f[R],
\f[V]\[dq]kbddbus\[dq]\f[R] or \f[V]\[dq]sway\[dq]\f[R], depending on
your system.
T}@T{
No
T}@T{
\f[V]\[dq]setxkbmap\[dq]\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
Only used by the \f[V]\[dq]setxkbmap\[dq]\f[R] driver.
T}@T{
No
T}@T{
\f[V]60\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{layout}\[dq]\f[R]
T}
T{
\f[V]sway_kb_identifier\f[R]
T}@T{
Identifier of the device you want to monitor, as found in the output of
\f[V]swaymsg -t get_inputs\f[R].
T}@T{
No
T}@T{
Defaults to first input found
T}
T{
\f[V]mappings\f[R]
T}@T{
Map \f[V]layout (variant)\f[R] to custom short name.
T}@T{
No
T}@T{
None
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{layout}\f[R]
T}@T{
Keyboard layout name
T}@T{
String
T}
T{
\f[V]{variant}\f[R]
T}@T{
Keyboard variant (only \f[V]localebus\f[R] and \f[V]sway\f[R] are
supported so far)
T}@T{
String
T}
.TE
.SS Load
.PP
Creates a block which displays the system load average.
.SS Examples
.PP
Display the 1-minute and 5-minute load averages, updated once per
second:
.IP
.nf
\f[C]
[[block]]
block = \[dq]load\[dq]
format = \[dq]1min avg: {1m}\[dq]
interval = 1
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]info\f[R]
T}@T{
Minimum load, where state is set to info.
T}@T{
No
T}@T{
\f[V]0.3\f[R]
T}
T{
\f[V]warning\f[R]
T}@T{
Minimum load, where state is set to warning.
T}@T{
No
T}@T{
\f[V]0.6\f[R]
T}
T{
\f[V]critical\f[R]
T}@T{
Minimum load, where state is set to critical.
T}@T{
No
T}@T{
\f[V]0.9\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{1m}\[dq]\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval in seconds.
T}@T{
No
T}@T{
\f[V]3\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
l l l.
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{1m}\f[R]
T}@T{
1 minute load average
T}@T{
Float
T}
T{
\f[V]{5m}\f[R]
T}@T{
5minute load average
T}@T{
Float
T}
T{
\f[V]{15m}\f[R]
T}@T{
15minute load average
T}@T{
Float
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]cogs\f[R]
.SS Maildir
.PP
Creates a block which shows unread mails.
Only supports maildir format.
.PP
NOTE: This block can only be used if you build with
\f[V]cargo build --features=maildir\f[R]
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]maildir\[dq]
interval = 60
inboxes = [\[dq]/home/user/mail/local\[dq], \[dq]/home/user/mail/gmail/Inbox\[dq]]
threshold_warning = 1
threshold_critical = 10
display_type = \[dq]new\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]inboxes\f[R]
T}@T{
List of maildir inboxes to look for mails in.
T}@T{
Yes
T}@T{
None
T}
T{
\f[V]threshold_warning\f[R]
T}@T{
Number of unread mails where state is set to warning.
T}@T{
No
T}@T{
\f[V]1\f[R]
T}
T{
\f[V]threshold_critical\f[R]
T}@T{
Number of unread mails where state is set to critical.
T}@T{
No
T}@T{
\f[V]10\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
T}@T{
No
T}@T{
\f[V]5\f[R]
T}
T{
\f[V]display_type\f[R]
T}@T{
Which part of the maildir to count: \f[V]\[dq]new\[dq]\f[R],
\f[V]\[dq]cur\[dq]\f[R], or \f[V]\[dq]all\[dq]\f[R].
T}@T{
No
T}@T{
\f[V]\[dq]new\[dq]\f[R]
T}
T{
\f[V]icon\f[R]
T}@T{
Whether or not to prepend the output with the mail icon.
\f[B]Deprecated\f[R]: set \f[V]icons_format=\[dq]\[dq]\f[R] to hide the
icon.
T}@T{
No
T}@T{
\f[V]true\f[R]
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]mail\f[R]
.SS Memory
.PP
Creates a block displaying memory and swap usage.
.PP
This module keeps track of both Swap and Memory.
By default, a click switches between them.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]memory\[dq]
format_mem = \[dq]{mem_used}/{mem_total}({mem_used_percents})\[dq]
format_swap = \[dq]{swap_used}/{swap_total}({swap_used_percents})\[dq]
display_type = \[dq]memory\[dq]
icons = true
clickable = true
interval = 5
warning_mem = 80
warning_swap = 80
critical_mem = 95
critical_swap = 95
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]format_mem\f[R]
T}@T{
A string to customise the output of this block when in \[lq]Memory\[rq]
view.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{mem_free;M}/{mem_total;M}({mem_total_used_percents})\[dq]\f[R]
T}
T{
\f[V]format_swap\f[R]
T}@T{
A string to customise the output of this block when in \[lq]Swap\[rq]
view.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{swap_free;M}/{swap_total;M}({swap_used_percents})\[dq]\f[R]
T}
T{
\f[V]display_type\f[R]
T}@T{
Default view displayed on startup: \[lq]\f[V]memory\f[R]\[rq] or
\[lq]\f[V]swap\f[R]\[rq].
T}@T{
No
T}@T{
\f[V]\[dq]memory\[dq]\f[R]
T}
T{
\f[V]clickable\f[R]
T}@T{
Whether the view should switch between memory and swap on click.
T}@T{
No
T}@T{
\f[V]true\f[R]
T}
T{
\f[V]warning_mem\f[R]
T}@T{
Percentage of memory usage, where state is set to warning.
T}@T{
No
T}@T{
\f[V]80.0\f[R]
T}
T{
\f[V]warning_swap\f[R]
T}@T{
Percentage of swap usage, where state is set to warning.
T}@T{
No
T}@T{
\f[V]80.0\f[R]
T}
T{
\f[V]critical_mem\f[R]
T}@T{
Percentage of memory usage, where state is set to critical.
T}@T{
No
T}@T{
\f[V]95.0\f[R]
T}
T{
\f[V]critical_swap\f[R]
T}@T{
Percentage of swap usage, where state is set to critical.
T}@T{
No
T}@T{
\f[V]95.0\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
The delay in seconds between an update.
If \f[V]clickable\f[R], an update is triggered on click.
Integer values only.
T}@T{
No
T}@T{
\f[V]5\f[R]
T}
.TE
.SS Deprecated options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]icons\f[R]
T}@T{
Whether the format string should be prepended with icons.
Deprecated - set \f[V]icons_format = \[dq]\[dq]\f[R] to disable icons.
T}@T{
No
T}@T{
\f[V]true\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{mem_total}\f[R]
T}@T{
Memory total
T}@T{
Float
T}
T{
\f[V]{mem_free}\f[R]
T}@T{
Memory free
T}@T{
Float
T}
T{
\f[V]{mem_free_percents}\f[R]
T}@T{
Memory free %
T}@T{
Float
T}
T{
\f[V]{mem_total_used}\f[R]
T}@T{
Total memory used
T}@T{
Float
T}
T{
\f[V]{mem_total_used_percents}\f[R]
T}@T{
Total memory used %
T}@T{
Float
T}
T{
\f[V]{mem_used}\f[R]
T}@T{
Memory used, excluding cached memory and buffers; similar to htop\[cq]s
green bar
T}@T{
Float
T}
T{
\f[V]{mem_used_percents}\f[R]
T}@T{
Memory used, excluding cached memory and buffers; similar to htop\[cq]s
green bar (in %)
T}@T{
Float
T}
T{
\f[V]{mem_avail}\f[R]
T}@T{
Available memory, including cached memory and buffers
T}@T{
Float
T}
T{
\f[V]{mem_avail_percents}\f[R]
T}@T{
Available memory, including cached memory and buffers (in %)
T}@T{
Float
T}
T{
\f[V]{swap_total}\f[R]
T}@T{
Swap total
T}@T{
Float
T}
T{
\f[V]{swap_free}\f[R]
T}@T{
Swap free
T}@T{
Float
T}
T{
\f[V]{swap_free_percents}\f[R]
T}@T{
Swap free %
T}@T{
Float
T}
T{
\f[V]{swap_used}\f[R]
T}@T{
Swap used
T}@T{
Float
T}
T{
\f[V]{swap_used_percents}\f[R]
T}@T{
Swap used
T}@T{
Float
T}
T{
\f[V]{buffers}\f[R]
T}@T{
Buffers, similar to htop\[cq]s blue bar
T}@T{
Float
T}
T{
\f[V]{buffers_percent}\f[R]
T}@T{
Buffers, similar to htop\[cq]s blue bar (in %)
T}@T{
Float
T}
T{
\f[V]{cached}\f[R]
T}@T{
Cached memory, similar to htop\[cq]s yellow bar
T}@T{
Float
T}
T{
\f[V]{cached_percent}\f[R]
T}@T{
Cached memory, similar to htop\[cq]s yellow bar (in %)
T}@T{
Float
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]memory_mem\f[R]
.IP \[bu] 2
\f[V]memory_swap\f[R]
.SS Music
.PP
Creates a block to display the current song title and artist in a
fixed-width marquee.
Also provides buttons for play/pause, previous and next.
When there is no song playing the block collapses to show just the icon
and any configured buttons.
.PP
Supports all music players that implement the MediaPlayer2
Interface (https://specifications.freedesktop.org/mpris-spec/latest/Player_Interface.html).
This includes:
.IP \[bu] 2
Spotify
.IP \[bu] 2
VLC
.IP \[bu] 2
mpd (via mpDris2 (https://github.com/eonpatapon/mpDris2))
.PP
and many others.
.PP
By default the block tracks all players available on the MPRIS bus.
Right clicking on the block will cycle it to the next player (if the
next player has no song playing then the block will collapse, however
you can continue to right click to the next player.).
You can pin the widget to a given player via the \[lq]player\[rq]
setting.
.SS Examples
.PP
Show the currently playing song on Spotify only, with play & next
buttons:
.IP
.nf
\f[C]
[[block]]
block = \[dq]music\[dq]
player = \[dq]spotify\[dq]
buttons = [\[dq]play\[dq], \[dq]next\[dq]]
\f[R]
.fi
.PP
Same thing for any compatible player, takes the first active on the bus,
but ignores \[lq]mpd\[rq] or anything with \[lq]kdeconnect\[rq] in the
name:
.IP
.nf
\f[C]
[[block]]
block = \[dq]music\[dq]
buttons = [\[dq]play\[dq], \[dq]next\[dq]]
interface_name_exclude = [\[dq].*kdeconnect.*\[dq], \[dq]mpd\[dq]]
\f[R]
.fi
.PP
Start Spotify if the block is clicked whilst it\[cq]s collapsed:
.IP
.nf
\f[C]
[[block]]
block = \[dq]music\[dq]
on_collapsed_click = \[dq]spotify\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]player\f[R]
T}@T{
Name of the music player MPRIS interface.
Run
\f[V]busctl --user list \[rs]| grep \[dq]org.mpris.MediaPlayer2.\[dq] \[rs]| cut -d\[aq] \[aq] -f1\f[R]
and the name is the part after \[lq]org.mpris.MediaPlayer2.\[rq].
If unset, you can cycle through different players by right clicking on
the widget.
T}@T{
No
T}@T{
None
T}
T{
\f[V]interface_name_exclude\f[R]
T}@T{
A list of regex patterns for player MPRIS interface names to ignore.
T}@T{
No
T}@T{
\[lq]\[rq]
T}
T{
\f[V]max_width\f[R]
T}@T{
Max width of the block in characters, not including the buttons.
T}@T{
No
T}@T{
\f[V]21\f[R]
T}
T{
\f[V]dynamic_width\f[R]
T}@T{
Bool to specify whether the block will change width depending on the
text content or remain static always (= \f[V]max_width\f[R]).
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]marquee\f[R]
T}@T{
Bool to specify if a marquee style rotation should be used if the title
+ artist is longer than max-width.
T}@T{
No
T}@T{
\f[V]true\f[R]
T}
T{
\f[V]marquee_interval\f[R]
T}@T{
Marquee interval in seconds.
This is the delay between each rotation.
T}@T{
No
T}@T{
\f[V]10\f[R]
T}
T{
\f[V]marquee_speed\f[R]
T}@T{
Marquee speed in seconds.
This is the scrolling time used per character.
T}@T{
No
T}@T{
\f[V]0.5\f[R]
T}
T{
\f[V]smart_trim\f[R]
T}@T{
If title + artist is longer than max-width, trim from both the artist
and the title in proportion to their lengths to try and show the most
information possible.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]separator\f[R]
T}@T{
String to insert between artist and title.
T}@T{
No
T}@T{
\f[V]\[dq] - \[dq]\f[R]
T}
T{
\f[V]buttons\f[R]
T}@T{
Array of control buttons to be displayed.
Options are prev (previous title), play (play/pause) and next (next
title).
T}@T{
No
T}@T{
\f[V][]\f[R]
T}
T{
\f[V]on_collapsed_click\f[R]
T}@T{
Command to run when the block is clicked while collapsed.
T}@T{
No
T}@T{
None
T}
T{
\f[V]on_click\f[R]
T}@T{
Command to run when the block is clicked while not collapsed.
T}@T{
No
T}@T{
None
T}
T{
\f[V]seek_step\f[R]
T}@T{
Number of microseconds to seek forward/backward when scrolling on the
bar.
T}@T{
No
T}@T{
\f[V]1000\f[R]
T}
T{
\f[V]hide_when_empty\f[R]
T}@T{
Hides the block when there is no player available.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{combo}\[dq]\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{artist}\f[R]
T}@T{
Current artist (may be an empty string)
T}@T{
String
T}
T{
\f[V]{title}\f[R]
T}@T{
Current title (may be an empty string)
T}@T{
String
T}
T{
\f[V]{combo}\f[R]
T}@T{
Resolves to \[lq]\f[V]{artist}[sep]{title}\[dq]\f[R],
\f[V]\[dq]{artist}\[dq]\f[R], or \f[V]\[dq]{title}\[dq]\f[R] depending
on what information is available.
\f[V][sep]\f[R] is set by \f[V]separator\f[R] option.
The \f[V]smart_trim\f[R] option affects the output.
T}@T{
String
T}
T{
\f[V]{player}\f[R]
T}@T{
Name of the current player (taken from the last part of its MPRIS bus
name)
T}@T{
String
T}
T{
\f[V]{avail}\f[R]
T}@T{
Total number of players available to switch between
T}@T{
String
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]music\f[R]
.IP \[bu] 2
\f[V]music_next\f[R]
.IP \[bu] 2
\f[V]music_play\f[R]
.IP \[bu] 2
\f[V]music_prev\f[R]
.SS Net
.PP
Creates a block which displays the upload and download throughput for a
network interface.
.PP
\f[V]bitrate\f[R] requires either \f[V]ethtool\f[R] for wired devices or
\f[V]iw\f[R] for wireless devices.
.PD 0
.P
.PD
\f[V]ip\f[R] and \f[V]ipv6\f[R] require \f[V]ip\f[R].
.SS Examples
.PP
Displays ssid, signal strength, ip, down speed and up speed as bits per
second.
Minimal prefix is set to \f[V]K\f[R] in order to prevent the block to
change it\[cq]s size.
.IP
.nf
\f[C]
[[block]]
block = \[dq]net\[dq]
device = \[dq]wlp2s0\[dq]
format = \[dq]{ssid} {signal_strength} {ip} {speed_down;K*b} {graph_down;K*b}\[dq]
interval = 5
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]device\f[R]
T}@T{
Network interface to monitor (name from /sys/class/net).
T}@T{
No
T}@T{
Automatically chosen from the output of \f[V]ip route show default\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{speed_up;K} {speed_down;K}\[dq]\f[R]
T}
T{
\f[V]format_alt\f[R]
T}@T{
If set, block will switch its formatting between \f[V]format\f[R] and
\f[V]format_alt\f[R] on every click.
T}@T{
No
T}@T{
None
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
Note: the update interval for SSID and IP address is fixed at 30
seconds, and bitrate fixed at 10 seconds.
T}@T{
No
T}@T{
\f[V]1\f[R]
T}
T{
\f[V]hide_missing\f[R]
T}@T{
Whether to hide interfaces that don\[cq]t exist on the system.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]hide_inactive\f[R]
T}@T{
Whether to hide interfaces that are not connected (or missing).
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(14.6n) lw(20.4n) lw(17.5n) lw(17.5n).
T{
Key
T}@T{
Value
T}@T{
Type
T}@T{
Unit
T}
_
T{
\f[V]ssid\f[R]
T}@T{
Network SSID (wireless only)
T}@T{
String
T}@T{
-
T}
T{
\f[V]signal_strength\f[R]
T}@T{
Display WiFi signal strength (wireless only)
T}@T{
Integer
T}@T{
%
T}
T{
\f[V]frequency\f[R]
T}@T{
WiFi frequency (wireless only)
T}@T{
Float
T}@T{
Hz
T}
T{
\f[V]bitrate\f[R]
T}@T{
Connection bitrate
T}@T{
String
T}@T{
-
T}
T{
\f[V]ip\f[R]
T}@T{
Connection IP address
T}@T{
String
T}@T{
-
T}
T{
\f[V]ipv6\f[R]
T}@T{
Connection IPv6 address
T}@T{
String
T}@T{
-
T}
T{
\f[V]speed_up\f[R]
T}@T{
Upload speed
T}@T{
Float
T}@T{
Bytes per second
T}
T{
\f[V]speed_down\f[R]
T}@T{
Download speed
T}@T{
Float
T}@T{
Bytes per second
T}
T{
\f[V]graph_up\f[R]
T}@T{
A bar graph for upload speed
T}@T{
String
T}@T{
-
T}
T{
\f[V]graph_down\f[R]
T}@T{
A bar graph for download speed
T}@T{
String
T}@T{
-
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]net_loopback\f[R]
.IP \[bu] 2
\f[V]net_vpn\f[R]
.IP \[bu] 2
\f[V]net_wired\f[R]
.IP \[bu] 2
\f[V]net_wireless\f[R]
.IP \[bu] 2
\f[V]net_up\f[R]
.IP \[bu] 2
\f[V]net_down\f[R]
.SS NetworkManager
.PP
Creates a block which displays network connection information from
NetworkManager.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]networkmanager\[dq]
on_click = \[dq]alacritty -e nmtui\[dq]
interface_name_exclude = [\[dq]br\[rs]\[rs]-[0-9a-f]{12}\[dq], \[dq]docker\[rs]\[rs]d+\[dq]]
interface_name_include = []
\f[R]
.fi
.PP
Same as previous, but also limits the length of SSID to 10 characters.
.IP
.nf
\f[C]
[[block]]
block = \[dq]networkmanager\[dq]
on_click = \[dq]alacritty -e nmtui\[dq]
interface_name_exclude = [\[dq]br\[rs]\[rs]-[0-9a-f]{12}\[dq], \[dq]docker\[rs]\[rs]d+\[dq]]
interface_name_include = []
ap_format = \[dq]{ssid\[ha]10}\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.0n) lw(18.1n) lw(22.6n) lw(20.3n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]primary_only\f[R]
T}@T{
Whether to show only the primary active connection or all active
connections.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]ap_format\f[R]
T}@T{
Access point string formatter.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{ssid}\[dq]\f[R]
T}
T{
\f[V]device_format\f[R]
T}@T{
Device string formatter.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{icon}{ap} {ips}\[dq]\f[R]
T}
T{
\f[V]connection_format\f[R]
T}@T{
Connection string formatter.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{devices}\[dq]\f[R]
T}
T{
\f[V]interface_name_exclude\f[R]
T}@T{
A list of regex patterns for device interface names to ignore.
T}@T{
No
T}@T{
\f[V]\[dq]\[dq]\f[R]
T}
T{
\f[V]interface_name_include\f[R]
T}@T{
A list of regex patterns for device interface names to include (only
interfaces that match at least one are shown).
T}@T{
No
T}@T{
\f[V]\[dq]\[dq]\f[R]
T}
.TE
.SS AP format string
.PP
.TS
tab(@);
l l l.
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{ssid}\f[R]
T}@T{
The SSID for this AP
T}@T{
String
T}
T{
\f[V]{strength}\f[R]
T}@T{
The signal strength in percent for this AP
T}@T{
Integer
T}
T{
\f[V]{freq}\f[R]
T}@T{
The frequency of this AP in MHz
T}@T{
String
T}
.TE
.SS Device format string
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{icon}\f[R]
T}@T{
The icon matching the device type
T}@T{
String
T}
T{
\f[V]{typename}\f[R]
T}@T{
The name of the device type
T}@T{
String
T}
T{
\f[V]{name}\f[R]
T}@T{
The name of the device interface
T}@T{
String
T}
T{
\f[V]{ap}\f[R]
T}@T{
The connected AP if available, formatted with the AP format string
T}@T{
String
T}
T{
\f[V]{ips}\f[R]
T}@T{
The list of IPs for this device
T}@T{
String
T}
.TE
.SS Connection format string
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{devices}\f[R]
T}@T{
The list of devices, each formatted with the device format string
T}@T{
String
T}
T{
\f[V]{id}\f[R]
T}@T{
???
T}@T{
String
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]net_bridge\f[R]
.IP \[bu] 2
\f[V]net_modem\f[R]
.IP \[bu] 2
\f[V]net_vpn\f[R]
.IP \[bu] 2
\f[V]net_wired\f[R]
.IP \[bu] 2
\f[V]net_wireless\f[R]
.IP \[bu] 2
\f[V]unknown\f[R]
.SS Notify
.PP
Displays the current state of your notification daemon.
.PP
Note: For \f[V]dunst\f[R] this block uses DBus to get instantaneous
updates, which is only possible in dunst v1.6.0 and higher.
.PP
TODO: support \f[V]mako\f[R]
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{state}\[dq]\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{state}\f[R]
T}@T{
Current state of the notification daemon in icon form
T}@T{
String
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]bell\f[R]
.IP \[bu] 2
\f[V]bell-slash\f[R]
.SS Notmuch
.PP
Creates a block which queries a notmuch database and displays the count
of messages.
.PP
The simplest configuration will return the total count of messages in
the notmuch database stored at $HOME/.mail
.PP
NOTE: This block can only be used if you build with
\f[V]cargo build --features=notmuch\f[R]
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]notmuch\[dq]
query = \[dq]tag:alert and not tag:trash\[dq]
threshold_warning = 1
threshold_critical = 10
name = \[dq]A\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]maildir\f[R]
T}@T{
Path to the directory containing the notmuch database.
T}@T{
No
T}@T{
\f[V]$HOME/.mail\f[R]
T}
T{
\f[V]query\f[R]
T}@T{
Query to run on the database.
T}@T{
No
T}@T{
\f[V]\[dq]\[dq]\f[R]
T}
T{
\f[V]threshold_critical\f[R]
T}@T{
Mail count that triggers \f[V]critical\f[R] state.
T}@T{
No
T}@T{
\f[V]99999\f[R]
T}
T{
\f[V]threshold_warning\f[R]
T}@T{
Mail count that triggers \f[V]warning\f[R] state.
T}@T{
No
T}@T{
\f[V]99999\f[R]
T}
T{
\f[V]threshold_good\f[R]
T}@T{
Mail count that triggers \f[V]good\f[R] state.
T}@T{
No
T}@T{
\f[V]99999\f[R]
T}
T{
\f[V]threshold_info\f[R]
T}@T{
Mail count that triggers \f[V]info\f[R] state.
T}@T{
No
T}@T{
\f[V]99999\f[R]
T}
T{
\f[V]name\f[R]
T}@T{
Label to show before the mail count.
T}@T{
No
T}@T{
\f[V]\[dq]\[dq]\f[R]
T}
T{
\f[V]no_icon\f[R]
T}@T{
Disable the mail icon.
\f[B]Deprecated\f[R]: set \f[V]icons_format=\[dq]\[dq]\f[R] to disable
hide the icon.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval in seconds.
T}@T{
No
T}@T{
\f[V]10\f[R]
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]mail\f[R]
.SS Nvidia Gpu
.PP
Creates a block which can display the name, utilization, temperature,
memory usage, fan speed and clock speed of your NVidia GPU.
.PP
By default the name provided by \f[V]nvidia-smi\f[R] will be shown.
If \f[V]label\f[R] is set then clicking the left mouse button on the
\[lq]name\[rq] part of the block will alternate it between showing the
default name or \f[V]label\f[R].
.PP
By default \f[V]show_temperature\f[R] shows the used memory.
Clicking the left mouse on the \[lq]temperature\[rq] part of the block
will alternate it between showing used or total available memory.
.PP
When using \f[V]show_fan_speed\f[R], clicking the left mouse button on
the \[lq]fan speed\[rq] part of the block will cause it to enter into a
fan speed setting mode.
In this mode you can scroll the mouse wheel over the block to change the
fan speeds, and left click to exit the mode.
.PP
Requires \f[V]nvidia-smi\f[R] for displaying info and
\f[V]nvidia_settings\f[R] for setting fan speed.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]nvidia_gpu\[dq]
label = \[dq]GT 1030\[dq]
show_memory = false
show_clocks = true
interval = 1
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
l l l l.
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]gpu_id\f[R]
T}@T{
GPU id in system.
T}@T{
No
T}@T{
\f[V]0\f[R]
T}
T{
\f[V]label\f[R]
T}@T{
Display custom GPU label.
T}@T{
No
T}@T{
\f[V]\[dq]\[dq]\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval in seconds.
T}@T{
No
T}@T{
\f[V]1\f[R]
T}
T{
\f[V]show_utilization\f[R]
T}@T{
Display GPU utilization percentage.
T}@T{
No
T}@T{
\f[V]true\f[R]
T}
T{
\f[V]show_memory\f[R]
T}@T{
Display memory information.
T}@T{
No
T}@T{
\f[V]true\f[R]
T}
T{
\f[V]show_temperature\f[R]
T}@T{
Display GPU temperature.
T}@T{
No
T}@T{
\f[V]true\f[R]
T}
T{
\f[V]show_fan_speed\f[R]
T}@T{
Display fan speed.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]show_clocks\f[R]
T}@T{
Display gpu clocks.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]show_power_draw\f[R]
T}@T{
Display GPU power draw in watts.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]gpu\f[R]
.SS Pacman
.PP
Creates a block which displays the pending updates available on pacman
or an AUR helper.
.PP
Requires fakeroot to be installed (only required for pacman).
.PP
Tip: You can grab the list of available updates using
\f[V]fakeroot pacman -Qu --dbpath /tmp/checkup-db-yourusername/\f[R].
If you have the CHECKUPDATES_DB env var set on your system then
substitute that dir instead of /tmp/checkup-db-yourusername.
.PP
Tip: On Arch Linux you can setup a \f[V]pacman\f[R] hook to signal
i3status-rs to update after packages have been upgraded, so you
won\[cq]t have stale info in your pacman block.
Create \f[V]/usr/share/libalpm/hooks/i3status.hook\f[R] with the below
contents:
.PP
Note: \f[V]pikaur\f[R] may hang the whole block if there is no internet
connectivity.
In that case, try a different AUR helper.
.IP
.nf
\f[C]
[Trigger]
Operation = Upgrade
Type = Package
Target = *

[Action]
When = PostTransaction
Exec = /usr/bin/pkill -SIGUSR1 i3status-rs
\f[R]
.fi
.SS Examples
.PP
Update the list of pending updates every ten minutes (600 seconds):
.PP
Update interval should be set appropriately as to not exceed the
AUR\[cq]s daily rate limit.
.PP
pacman only config:
.IP
.nf
\f[C]
[[block]]
block = \[dq]pacman\[dq]
interval = 600
format = \[dq]{pacman} updates available\[dq]
format_singular = \[dq]{pacman} update available\[dq]
format_up_to_date = \[dq]system up to date\[dq]
critical_updates_regex = \[dq](linux|linux-lts|linux-zen)\[dq]
# pop-up a menu showing the available updates. Replace wofi with your favourite menu command.
on_click = \[dq]fakeroot pacman -Qu --dbpath /tmp/checkup-db-yourusername/ | wofi --show dmenu\[dq]
\f[R]
.fi
.PP
pacman only config using warnings with ZFS modules:
.IP
.nf
\f[C]
[[block]]
block = \[dq]pacman\[dq]
interval = 600
format = \[dq]{pacman} updates available\[dq]
format_singular = \[dq]{pacman} update available\[dq]
format_up_to_date = \[dq]system up to date\[dq]
# If a linux update is availble, but no ZFS package, it won\[aq]t be possible to
# actually perform a system upgrade, so we show a warning.
warning_updates_regex = \[dq](linux|linux-lts|linux-zen)\[dq]
# If ZFS is available, we know that we can and should do an upgrade, so we show
# the status as critical.
critical_updates_regex = \[dq](zfs|zfs-lts)\[dq]
\f[R]
.fi
.PP
pacman and AUR helper config:
.IP
.nf
\f[C]
[[block]]
block = \[dq]pacman\[dq]
interval = 600
format = \[dq]{pacman} + {aur} = {both} updates available\[dq]
format_singular = \[dq]{both} update available\[dq]
format_up_to_date = \[dq]system up to date\[dq]
critical_updates_regex = \[dq](linux|linux-lts|linux-zen)\[dq]
# aur_command should output available updates to stdout (ie behave as echo -ne \[dq]update\[rs]n\[dq])
aur_command = \[dq]yay -Qua\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
T}@T{
No
T}@T{
\f[V]600\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{pacman}\[dq]\f[R]
T}
T{
\f[V]format_singular\f[R]
T}@T{
Same as \f[V]format\f[R] but for when exactly one update is available.
T}@T{
No
T}@T{
\f[V]\[dq]{pacman}\[dq]\f[R]
T}
T{
\f[V]format_up_to_date\f[R]
T}@T{
Same as \f[V]format\f[R] but for when no updates are available.
T}@T{
No
T}@T{
\f[V]\[dq]{pacman}\[dq]\f[R]
T}
T{
\f[V]warning_updates_regex\f[R]
T}@T{
Display block as warning if updates matching regex are available.
T}@T{
No
T}@T{
\f[V]None\f[R]
T}
T{
\f[V]critical_updates_regex\f[R]
T}@T{
Display block as critical if updates matching regex are available.
T}@T{
No
T}@T{
\f[V]None\f[R]
T}
T{
\f[V]aur_command\f[R]
T}@T{
AUR command to check available updates, which outputs in the same format
as pacman.
e.g.\ \f[V]yay -Qua\f[R]
T}@T{
if \f[V]{both}\f[R] or \f[V]{aur}\f[R] are used.
T}@T{
\f[V]None\f[R]
T}
T{
\f[V]hide_when_uptodate\f[R]
T}@T{
Hides the block when there are no updates available
T}@T{
\f[V]false\f[R]
T}@T{
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{count}\f[R]
T}@T{
Number of pacman updates available (\f[B]deprecated\f[R]: use
\f[V]{pacman}\f[R] instead)
T}@T{
Integer
T}
T{
\f[V]{pacman}\f[R]
T}@T{
Number of updates available according to \f[V]pacman\f[R]
T}@T{
Integer
T}
T{
\f[V]{aur}\f[R]
T}@T{
Number of updates available according to \f[V]<aur_command>\f[R]
T}@T{
Integer
T}
T{
\f[V]{both}\f[R]
T}@T{
Cumulative number of updates available according to \f[V]pacman\f[R] and
\f[V]<aur_command>\f[R]
T}@T{
Integer
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]update\f[R]
.SS Pomodoro
.PP
Creates a block which runs a pomodoro
timer (https://en.wikipedia.org/wiki/Pomodoro_Technique).
.PP
You can face problems showing the nagbar if i3 is configured to hide the
status bar.
See #701 (https://github.com/greshake/i3status-rust/pull/701) to fix
this.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]pomodoro\[dq]
length = 25
break_length = 5
message = \[dq]Take a break!\[dq]
break_message = \[dq]Back to work!\[dq]
notifier = \[dq]swaynag\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]length\f[R]
T}@T{
Timer duration in minutes.
T}@T{
No
T}@T{
\f[V]25\f[R]
T}
T{
\f[V]break_length\f[R]
T}@T{
Break duration in minutes.
T}@T{
No
T}@T{
\f[V]5\f[R]
T}
T{
\f[V]message\f[R]
T}@T{
Message displayed by notifier when timer expires.
T}@T{
No
T}@T{
\f[V]Pomodoro over! Take a break!\f[R]
T}
T{
\f[V]break_message\f[R]
T}@T{
Message displayed by notifier when break is over.
T}@T{
No
T}@T{
\f[V]Break over! Time to work!\f[R]
T}
T{
\f[V]notifier\f[R]
T}@T{
Notifier to use: \f[V]i3nag\f[R], \f[V]swaynag\f[R],
\f[V]notifysend\f[R], \f[V]none\f[R]
T}@T{
No
T}@T{
\f[V]none\f[R]
T}
T{
\f[V]notifier_path\f[R]
T}@T{
Override binary/path to run for the notifier
T}@T{
No
T}@T{
Defaults to \f[V]i3-nagbar\f[R], \f[V]swaynag\f[R], or
\f[V]notify-send\f[R] depending on the value of \f[V]notifier\f[R]
above.
T}
.TE
.SS Deprecated Options
.PP
.TS
tab(@);
l l l l.
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]use_nag\f[R]
T}@T{
i3-nagbar enabled.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]nag_path\f[R]
T}@T{
i3-nagbar binary path.
T}@T{
No
T}@T{
\f[V]i3-nagbar\f[R]
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]pomodoro\f[R]
.IP \[bu] 2
\f[V]pomodoro_started\f[R]
.IP \[bu] 2
\f[V]pomodoro_stopped\f[R]
.IP \[bu] 2
\f[V]pomodoro_paused\f[R]
.IP \[bu] 2
\f[V]pomodoro_break\f[R]
.SS Rofication
.PP
Creates a block with shows the number of pending notifications in
rofication-daemon.
A different color is used is there are critical notications.
Left clicking the block opens the GUI.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]rofication\[dq]
interval = 1
socket_path = \[dq]/tmp/rofi_notification_daemon\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]interval\f[R]
T}@T{
Refresh rate in seconds.
T}@T{
No
T}@T{
\f[V]1\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{num}\[dq]\f[R]
T}
T{
\f[V]socket_path\f[R]
T}@T{
Socket path for the rofication daemon.
T}@T{
No
T}@T{
\[lq]/tmp/rofi_notification_daemon\[rq]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
l l l.
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{num}\f[R]
T}@T{
Number of pending notifications
T}@T{
Integer
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]bell\f[R]
.IP \[bu] 2
\f[V]bell-slash\f[R]
.SS Sound
.PP
Creates a block which displays the volume level (according to PulseAudio
or ALSA).
Right click to toggle mute, scroll to adjust volume.
.PP
Requires a PulseAudio installation or \f[V]alsa-utils\f[R] for ALSA.
.PP
PulseAudio support is a feature and can be turned on
(\f[V]--features \[dq]pulseaudio\[dq]\f[R]) / off
(\f[V]--no-default-features\f[R]) during build with \f[V]cargo\f[R].
If PulseAudio support is enabled the \f[V]\[dq]auto\[dq]\f[R] driver
will first try to connect to PulseAudio and then fallback to ALSA on
error.
.PP
Note that if you are using PulseAudio commands (such as \f[V]pactl\f[R])
to control your volume, you should select the
\f[V]\[dq]pulseaudio\[dq]\f[R] (or \f[V]\[dq]auto\[dq]\f[R]) driver to
see volume changes that exceed 100%.
.SS Examples
.PP
Change the default scrolling step width to 3 percent:
.IP
.nf
\f[C]
[[block]]
block = \[dq]sound\[dq]
step_width = 3
\f[R]
.fi
.IP
.nf
\f[C]
[[block]]
block = \[dq]sound\[dq]
format = \[dq]{output_description} {volume}\[dq]
\f[R]
.fi
.IP
.nf
\f[C]
[[block]]
block = \[dq]sound\[dq]
format = \[dq]{output_name} {volume}\[dq]
[block.mappings]
\[dq]alsa_output.usb-Harman_Multimedia_JBL_Pebbles_1.0.0-00.analog-stereo\[dq] = \[dq]\[u1F508]\[dq]
\[dq]alsa_output.pci-0000_00_1b.0.analog-stereo\[dq] = \[dq]\[u1F3A7]\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]driver\f[R]
T}@T{
\f[V]\[dq]auto\[dq]\f[R], \f[V]\[dq]pulseaudio\[dq]\f[R],
\f[V]\[dq]alsa\[dq]\f[R].
T}@T{
No
T}@T{
\f[V]\[dq]auto\[dq]\f[R] (Pulseaudio with ALSA fallback)
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]{volume}\f[R]
T}
T{
\f[V]name\f[R]
T}@T{
PulseAudio device name, or the ALSA control name as found in the output
of \f[V]amixer -D yourdevice scontrols\f[R].
T}@T{
No
T}@T{
PulseAudio: \f[V]\[at]DEFAULT_SINK\[at]\f[R] / ALSA: \f[V]Master\f[R]
T}
T{
\f[V]device\f[R]
T}@T{
ALSA device name, usually in the form \[lq]hw:X\[rq] or \[lq]hw:X,Y\[rq]
where \f[V]X\f[R] is the card number and \f[V]Y\f[R] is the device
number as found in the output of \f[V]aplay -l\f[R].
T}@T{
No
T}@T{
\f[V]default\f[R]
T}
T{
\f[V]device_kind\f[R]
T}@T{
PulseAudio device kind: \f[V]source\f[R] or \f[V]sink\f[R].
T}@T{
No
T}@T{
\f[V]sink\f[R]
T}
T{
\f[V]natural_mapping\f[R]
T}@T{
When using the ALSA driver, display the \[lq]mapped volume\[rq] as given
by \f[V]alsamixer\f[R]/\f[V]amixer -M\f[R], which represents the volume
level more naturally with respect for the human ear.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]step_width\f[R]
T}@T{
The percent volume level is increased/decreased for the selected audio
device when scrolling.
Capped automatically at 50.
T}@T{
No
T}@T{
\f[V]5\f[R]
T}
T{
\f[V]max_vol\f[R]
T}@T{
Max volume in percent that can be set via scrolling.
Note it can still be set above this value if changed by another
application.
T}@T{
No
T}@T{
\f[V]None\f[R]
T}
T{
\f[V]on_click\f[R]
T}@T{
Shell command to run when the sound block is clicked.
T}@T{
No
T}@T{
None
T}
T{
\f[V]show_volume_when_muted\f[R]
T}@T{
Show the volume even if it is currently muted.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]headphones_indicator\f[R]
T}@T{
Change icon when headphones are plugged in (pulseaudio only)
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{volume}\f[R]
T}@T{
Current volume in percent
T}@T{
Integer
T}
T{
\f[V]{output_name}\f[R]
T}@T{
PulseAudio or ALSA device name
T}@T{
String
T}
T{
\f[V]{output_description}\f[R]
T}@T{
PulseAudio device description, will fallback to \f[V]output_name\f[R] if
no description is available and will be overwritten by mappings
(mappings will still use \f[V]output_name\f[R])
T}@T{
String
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]microphone_muted\f[R]
.IP \[bu] 2
\f[V]microphone_empty\f[R] (1 to 20%)
.IP \[bu] 2
\f[V]microphone_half\f[R] (21 to 70%)
.IP \[bu] 2
\f[V]microphone_full\f[R] (over 71%)
.IP \[bu] 2
\f[V]volume_muted\f[R]
.IP \[bu] 2
\f[V]volume_empty\f[R] (1 to 20%)
.IP \[bu] 2
\f[V]volume_half\f[R] (21 to 70%)
.IP \[bu] 2
\f[V]volume_full\f[R] (over 71%)
.IP \[bu] 2
\f[V]headphones\f[R]
.SS Speed Test
.PP
Creates a block which uses
\f[V]speedtest-cli\f[R] (https://github.com/sivel/speedtest-cli) to
measure your ping, download, and upload speeds.
.SS Examples
.PP
Display speed in bits per second using 3 digits (defaults)
.IP
.nf
\f[C]
[[block]]
block = \[dq]speedtest\[dq]
interval = 1800
\f[R]
.fi
.PP
Display speed in bytes per second using 4 digits
.IP
.nf
\f[C]
[[block]]
block = \[dq]speedtest\[dq]
interval = 1800
format = \[dq]{ping}{speed_down:4*B}{speed_up:4*B}\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{ping}{speed_down}{speed_up}\[dq]\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval in seconds.
T}@T{
No
T}@T{
\f[V]1800\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
l l l l.
T{
Key
T}@T{
Value
T}@T{
Type
T}@T{
Unit
T}
_
T{
\f[V]{ping}\f[R]
T}@T{
Ping delay
T}@T{
Float
T}@T{
Seconds
T}
T{
\f[V]{speed_down}\f[R]
T}@T{
Download speed
T}@T{
Float
T}@T{
Bits per second
T}
T{
\f[V]{speed_up}\f[R]
T}@T{
Upload speed
T}@T{
Float
T}@T{
Bits per second
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]ping\f[R]
.IP \[bu] 2
\f[V]net_down\f[R]
.IP \[bu] 2
\f[V]net_up\f[R]
.SS Taskwarrior
.PP
Creates a block which displays the number of tasks matching user-defined
filters from the current user\[cq]s taskwarrior list.
.PP
Clicking the left mouse button on the icon updates the number of tasks
immediately.
.PP
Clicking the right mouse button on the icon cycles the view of the block
through the user\[cq]s filters.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]taskwarrior\[dq]
interval = 60
format = \[dq]{count} open tasks ({filter_name})\[dq]
format_singular = \[dq]{count} open task ({filter_name})\[dq]
format_everything_done = \[dq]nothing to do!\[dq]
warning_threshold = 10
critical_threshold = 20
[[block.filters]]
name = \[dq]today\[dq]
filter = \[dq]+PENDING +OVERDUE or +DUETODAY\[dq]
[[block.filters]]
name = \[dq]some-project\[dq]
filter = \[dq]project:some-project +PENDING\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
T}@T{
No
T}@T{
\f[V]600\f[R] (10min)
T}
T{
\f[V]warning_threshold\f[R]
T}@T{
The threshold of pending (or started) tasks when the block turns into a
warning state.
T}@T{
No
T}@T{
\f[V]10\f[R]
T}
T{
\f[V]critical_threshold\f[R]
T}@T{
The threshold of pending (or started) tasks when the block turns into a
critical state.
T}@T{
No
T}@T{
\f[V]20\f[R]
T}
T{
\f[V]filter_tags\f[R]
T}@T{
Deprecated in favour of \f[V]filters\f[R].
A list of tags a task has to have before its counted as a pending task.
The list of tags will be appended to the base filter
\f[V]-COMPLETED -DELETED\f[R].
T}@T{
No
T}@T{
\f[V]<empty>\f[R]
T}
T{
\f[V]filters\f[R]
T}@T{
A list of tables with the keys \f[V]name\f[R] and \f[V]filter\f[R].
\f[V]filter\f[R] specifies the criteria that must be met for a task to
be counted towards this filter.
T}@T{
No
T}@T{
\f[V][{name = \[dq]pending\[dq], filter = \[dq]-COMPLETED -DELETED\[dq]}]\f[R]
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{count}\[dq]\f[R]
T}
T{
\f[V]format_singular\f[R]
T}@T{
Same as \f[V]format\f[R] but for when exactly one task is pending.
T}@T{
No
T}@T{
\f[V]\[dq]{count}\[dq]\f[R]
T}
T{
\f[V]format_everything_done\f[R]
T}@T{
Same as \f[V]format\f[R] but for when all tasks are completed.
T}@T{
No
T}@T{
\f[V]\[dq]{count}\[dq]\f[R]
T}
T{
\f[V]data_location\f[R]
T}@T{
Directory in which taskwarrior stores its data files.
T}@T{
No
T}@T{
\[lq]\[ti]/.task\[rq]\[ga]
T}
.TE
.PP
Note: data_location is used to get instant notifications (changes in
files inside that directory will trigger a check) only.
The actual counts come from executing taskwarrior.
.SS Available Format Keys
.PP
.TS
tab(@);
l l l.
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{count}\f[R]
T}@T{
The number of pending tasks
T}@T{
Integer
T}
T{
\f[V]{filter_name}\f[R]
T}@T{
The name of the current filter
T}@T{
String
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]tasks\f[R]
.SS Temperature
.PP
Creates a block which displays the system temperature, based on
\f[V]libsensors\f[R] library.
The block has two modes: \[lq]collapsed\[rq], which uses only colour as
an indicator, and \[lq]expanded\[rq], which shows the content of a
\f[V]format\f[R] string.
.PP
Requires \f[V]libsensors\f[R] and appropriate kernel modules for your
hardware.
.PP
The average, minimum, and maximum temperatures are computed using all
sensors displayed by \f[V]sensors\f[R], or optionally filtered by
\f[V]chip\f[R] and \f[V]inputs\f[R].
.PP
Note that the colour of the block is always determined by the maximum
temperature across all sensors, not the average.
You may need to keep this in mind if you have a misbehaving sensor.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]temperature\[dq]
collapsed = false
interval = 10
format = \[dq]{min} min, {max} max, {average} avg\[dq]
chip = \[dq]*-isa-*\[dq]
inputs = [\[dq]CPUTIN\[dq], \[dq]SYSTIN\[dq]]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]interval\f[R]
T}@T{
Update interval in seconds.
T}@T{
No
T}@T{
\f[V]5\f[R]
T}
T{
\f[V]collapsed\f[R]
T}@T{
Whether the block will be collapsed by default.
T}@T{
No
T}@T{
\f[V]true\f[R]
T}
T{
\f[V]scale\f[R]
T}@T{
Either \f[V]celsius\f[R] or \f[V]fahrenheit\f[R].
T}@T{
No
T}@T{
\f[V]celsius\f[R]
T}
T{
\f[V]good\f[R]
T}@T{
Maximum temperature to set state to good.
T}@T{
No
T}@T{
\f[V]20\f[R] \[de]C (\f[V]68\f[R] \[de]F)
T}
T{
\f[V]idle\f[R]
T}@T{
Maximum temperature to set state to idle.
T}@T{
No
T}@T{
\f[V]45\f[R] \[de]C (\f[V]113\f[R] \[de]F)
T}
T{
\f[V]info\f[R]
T}@T{
Maximum temperature to set state to info.
T}@T{
No
T}@T{
\f[V]60\f[R] \[de]C (\f[V]140\f[R] \[de]F)
T}
T{
\f[V]warning\f[R]
T}@T{
Maximum temperature to set state to warning.
Beyond this temperature, state is set to critical.
T}@T{
No
T}@T{
\f[V]80\f[R] \[de]C (\f[V]176\f[R] \[de]F)
T}
T{
\f[V]chip\f[R]
T}@T{
Narrows the results to a given chip name.
If driver = \f[V]\[dq]sensors\[dq]\f[R] then \f[V]*\f[R] may be used as
a wildcard.
If driver = \f[V]\[dq]sysfs\[dq]\f[R] then narrows to chips whose
\[cq]\[lq]/sys/class/hwmon/hwmon*/name\[rq]\[cq] is a substring of the
given chip name or vice versa.
\f[V]sysfs\f[R] can not match to the bus such as \f[V]*-isa-*\f[R] or
\f[V]*-pci-*\f[R]).
T}@T{
No
T}@T{
None
T}
T{
\f[V]inputs\f[R]
T}@T{
Narrows the results to individual inputs reported by each chip.
T}@T{
No
T}@T{
None
T}
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{average} avg, {max} max\[dq]\f[R]
T}
.TE
.SS Deprecated options
.PP
.TS
tab(@);
l l l l.
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]driver\f[R]
T}@T{
One of \f[V]\[dq]sensors\[dq]\f[R] or \f[V]\[dq]sysfs\[dq]\f[R].
T}@T{
No
T}@T{
\f[V]\[dq]sensors\[dq]\f[R]
T}
.TE
.SS Available Format Keys
.PP
.TS
tab(@);
l l l.
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{min}\f[R]
T}@T{
Minimum temperature among all sensors
T}@T{
Integer
T}
T{
\f[V]{average}\f[R]
T}@T{
Average temperature among all sensors
T}@T{
Integer
T}
T{
\f[V]{max}\f[R]
T}@T{
Maximum temperature among all sensors
T}@T{
Integer
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]thermometer\f[R]
.SS Time
.PP
Creates a block which display the current time.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]time\[dq]
format = \[dq]%a %d/%m %R\[dq]
timezone = \[dq]US/Pacific\[dq]
interval = 60
locale = \[dq]fr_BE\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See the chrono
docs (https://docs.rs/chrono/0.4/chrono/format/strftime/index.html#specifiers)
for all options.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]%a %d/%m %R\[dq]\f[R]
T}
T{
\f[V]on_click\f[R]
T}@T{
Shell command to run when the time block is clicked.
T}@T{
No
T}@T{
None
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
T}@T{
No
T}@T{
\f[V]5\f[R]
T}
T{
\f[V]timezone\f[R]
T}@T{
A timezone specifier (e.g.\ \[lq]Europe/Lisbon\[rq]).
T}@T{
No
T}@T{
Local timezone
T}
T{
\f[V]locale\f[R]
T}@T{
Locale to apply when formatting the time.
T}@T{
No
T}@T{
System locale
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]time\f[R]
.SS Toggle
.PP
Creates a toggle block.
You can add commands to be executed to disable the toggle
(\f[V]command_off\f[R]), and to enable it (\f[V]command_on\f[R]).
If these command exit with a non-zero status, the block will not be
toggled and the block state will be changed to give a visual warning of
the failure.
You also need to specify a command to determine the initial state of the
toggle (\f[V]command_state\f[R]).
When the command outputs nothing, the toggle is disabled, otherwise
enabled.
By specifying the \f[V]interval\f[R] property you can let the
\f[V]command_state\f[R] be executed continuously.
.SS Examples
.PP
This is what I use to toggle my external monitor configuration:
.IP
.nf
\f[C]
[[block]]
block = \[dq]toggle\[dq]

text = \[dq]4k\[dq]
command_state = \[dq]xrandr | grep DP1\[rs]\[rs] connected\[rs]\[rs] 38 | grep -v eDP1\[dq]
command_on = \[dq]\[ti]/.screenlayout/4kmon_default.sh\[dq]
command_off = \[dq]\[ti]/.screenlayout/builtin.sh\[dq]
interval = 5
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]text\f[R]
T}@T{
Label to include next to the toggle icon.
T}@T{
No
T}@T{
\f[V]\[dq]\[dq]\f[R]
T}
T{
\f[V]command_on\f[R]
T}@T{
Shell Command to enable the toggle.
T}@T{
Yes
T}@T{
None
T}
T{
\f[V]command_off\f[R]
T}@T{
Shell Command to disable the toggle.
T}@T{
Yes
T}@T{
None
T}
T{
\f[V]command_state\f[R]
T}@T{
Shell Command to determine toggle state.
Empty output => off.
Any output => on.
T}@T{
Yes
T}@T{
None
T}
T{
\f[V]icon_on\f[R]
T}@T{
Icon override for the toggle button while on.
T}@T{
No
T}@T{
\f[V]\[dq]toggle_on\[dq]\f[R]
T}
T{
\f[V]icon_off\f[R]
T}@T{
Icon override for the toggle button while off.
T}@T{
No
T}@T{
\f[V]\[dq]toggle_off\[dq]\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
T}@T{
No
T}@T{
None
T}
.TE
.SS Icons Used
.IP \[bu] 2
\f[V]toggle_off\f[R]
.IP \[bu] 2
\f[V]toggle_on\f[R]
.SS Uptime
.PP
Creates a block which displays system uptime.
The block will always display the 2 biggest units, so minutes and
seconds, or hours and minutes or days and hours or weeks and days.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]uptime\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
l l l l.
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]interval\f[R]
T}@T{
Update interval in seconds.
T}@T{
No
T}@T{
\f[V]60\f[R]
T}
.TE
.SS Used Icons
.IP \[bu] 2
\f[V]uptime\f[R]
.SS Watson
.PP
Watson (http://tailordev.github.io/Watson/) is a simple CLI time
tracking application.
This block will show the name of your current active project, tags and
optionally recorded time.
Clicking the widget will toggle the \f[V]show_time\f[R] variable
dynamically.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]watson\[dq]
show_time = true
state_path = \[dq]/home/user/.config/watson/state\[dq]
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]show_time\f[R]
T}@T{
Whether to show recorded time.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
T{
\f[V]state_path\f[R]
T}@T{
Path to the Watson state file.
T}@T{
No
T}@T{
\f[V]$XDG_CONFIG_HOME/watson/state\f[R]
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
T}@T{
No
T}@T{
\f[V]60\f[R]
T}
.TE
.SS Weather
.PP
Creates a block which displays local weather and temperature
information.
In order to use this block, you will need access to a supported weather
API service.
At the time of writing, OpenWeatherMap is the only supported service.
.PP
Configuring the Weather block requires configuring a weather service,
which may require API keys and other parameters.
.PP
If using the \f[V]autolocate\f[R] feature, set the block update interval
such that you do not exceed ipapi.co\[cq]s free daily limit of 1000
hits.
.SS Examples
.PP
Show detailed weather in San Francisco through the OpenWeatherMap
service:
.IP
.nf
\f[C]
[[block]]
block = \[dq]weather\[dq]
format = \[dq]{weather} ({location}) {temp}, {wind} m/s {direction}\[dq]
service = { name = \[dq]openweathermap\[dq], api_key = \[dq]XXX\[dq], city_id = \[dq]5398563\[dq], units = \[dq]metric\[dq] }
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
\f[V]\[dq]{weather} {temp}\[dq]\f[R]
T}
T{
\f[V]service\f[R]
T}@T{
The configuration of a weather service (see below).
T}@T{
Yes
T}@T{
None
T}
T{
\f[V]interval\f[R]
T}@T{
Update interval, in seconds.
T}@T{
No
T}@T{
\f[V]600\f[R]
T}
T{
\f[V]autolocate\f[R]
T}@T{
Gets your location using the ipapi.co IP location service (no API key
required).
If the API call fails then the block will fallback to \f[V]city_id\f[R]
or \f[V]place\f[R].
T}@T{
No
T}@T{
false
T}
.TE
.SS OpenWeatherMap Options
.PP
To use the service you will need a (free) API key.
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]name\f[R]
T}@T{
\f[V]openweathermap\f[R].
T}@T{
Yes
T}@T{
None
T}
T{
\f[V]api_key\f[R]
T}@T{
Your OpenWeatherMap API key.
T}@T{
Yes
T}@T{
None
T}
T{
\f[V]city_id\f[R]
T}@T{
OpenWeatherMap\[cq]s ID for the city.
T}@T{
Yes*
T}@T{
None
T}
T{
\f[V]place\f[R]
T}@T{
OpenWeatherMap `By city name' search query.
See here (https://openweathermap.org/current)
T}@T{
Yes*
T}@T{
None
T}
T{
\f[V]coordinates\f[R]
T}@T{
GPS latitude longitude coordinates as a tuple, example:
\f[V][\[dq]39.236229089090216\[dq],\[dq]9.331730718685696\[dq]]\f[R]
T}@T{
T}@T{
T}
T{
\f[V]units\f[R]
T}@T{
Either \f[V]metric\f[R] or \f[V]imperial\f[R].
T}@T{
Yes
T}@T{
\f[V]metric\f[R]
T}
T{
\f[V]lang\f[R]
T}@T{
Language code.
See here (https://openweathermap.org/current#multi).
Currently only affects \f[V]weather_verbose\f[R] key.
T}@T{
No
T}@T{
\f[V]en\f[R]
T}
.TE
.PP
One of \f[V]city_id\f[R], \f[V]place\f[R] or \f[V]coordinates\f[R] is
required.
If more than one are supplied, \f[V]city_id\f[R] takes precedence over
\f[V]place\f[R] which takes place over \f[V]coordinates\f[R].
.PP
The options \f[V]api_key\f[R], \f[V]city_id\f[R], \f[V]place\f[R] can be
omitted from configuration, in which case they must be provided in the
environment variables \f[V]OPENWEATHERMAP_API_KEY\f[R],
\f[V]OPENWEATHERMAP_CITY_ID\f[R], \f[V]OPENWEATHERMAP_PLACE\f[R].
.SS Available Format Keys
.PP
.TS
tab(@);
lw(20.6n) lw(28.8n) lw(20.6n).
T{
Key
T}@T{
Value
T}@T{
Type
T}
_
T{
\f[V]{location}\f[R]
T}@T{
Location name (exact format depends on the service)
T}@T{
String
T}
T{
\f[V]{temp}\f[R]
T}@T{
Temperature
T}@T{
Integer
T}
T{
\f[V]{apparent}\f[R]
T}@T{
Australian Apparent Temperature
T}@T{
Integer
T}
T{
\f[V]{humidity}\f[R]
T}@T{
Humidity
T}@T{
Integer
T}
T{
\f[V]{weather}\f[R]
T}@T{
Textual brief description of the weather, e.g.\ \[lq]Raining\[rq]
T}@T{
String
T}
T{
\f[V]{weather_verbose}\f[R]
T}@T{
Textual verbose description of the weather, e.g.\ \[lq]overcast
clouds\[rq]
T}@T{
String
T}
T{
\f[V]{wind}\f[R]
T}@T{
Wind speed
T}@T{
Float
T}
T{
\f[V]{wind_kmh}\f[R]
T}@T{
Wind speed.
The wind speed in km/h.
T}@T{
Float
T}
T{
\f[V]{direction}\f[R]
T}@T{
Wind direction, e.g.\ \[lq]NE\[rq]
T}@T{
String
T}
.TE
.SS Used Icons
.IP \[bu] 2
\f[V]weather_sun\f[R] (when weather is reported as \[lq]Clear\[rq])
.IP \[bu] 2
\f[V]weather_rain\f[R] (when weather is reported as \[lq]Rain\[rq] or
\[lq]Drizzle\[rq])
.IP \[bu] 2
\f[V]weather_clouds\f[R] (when weather is reported as \[lq]Clouds\[rq],
\[lq]Fog\[rq] or \[lq]Mist\[rq])
.IP \[bu] 2
\f[V]weather_thunder\f[R] (when weather is reported as
\[lq]Thunderstorm\[rq])
.IP \[bu] 2
\f[V]weather_snow\f[R] (when weather is reported as \[lq]Snow\[rq])
.IP \[bu] 2
\f[V]weather_default\f[R] (in all other cases)
.SS Xrandr
.PP
Creates a block which shows screen information (name, brightness,
resolution).
With a click you can toggle through your active screens and with wheel
up and down you can adjust the selected screens brightness.
Regarding brightness control, xrandr changes the brightness of the
display using gamma rather than changing the brightness in hardware, so
if that is not desirable then consider using the \f[V]backlight\f[R]
block instead.
.PP
NOTE: Some users report issues
(e.g.\ here (https://github.com/greshake/i3status-rust/issues/274),
here (https://github.com/greshake/i3status-rust/issues/668) and
here (https://github.com/greshake/i3status-rust/issues/1364)) when using
this block.
The cause is currently unknown, however setting a higher update interval
may help.
.SS Examples
.IP
.nf
\f[C]
[[block]]
block = \[dq]xrandr\[dq]
icons = true
resolution = true
\f[R]
.fi
.SS Options
.PP
.TS
tab(@);
lw(9.3n) lw(18.7n) lw(23.3n) lw(18.7n).
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]format\f[R]
T}@T{
A string to customise the output of this block.
See below for available placeholders.
Text may need to be escaped, refer to Escaping Text.
T}@T{
No
T}@T{
Depends on \f[V]icons\f[R] and \f[V]resolution\f[R].
With default \f[V]icons\f[R] and \f[V]resolution\f[R] the default value
is
\f[V]\[dq]{display} {brightness_icon} {brightness}\[dq]\[ga]\[ga]\f[R]step_width\f[V]| The steps brightness is in/decreased for the selected screen (When greater than 50 it gets limited to 50). | No |\f[R]5\f[V]\f[R]interval\f[V]| Update interval in seconds. | No |\f[R]5\[ga]
T}
.TE
.PP
.TS
tab(@);
lw(19.2n) lw(28.8n) lw(7.7n) lw(14.4n).
T{
Placeholder
T}@T{
Value
T}@T{
Type
T}@T{
Unit
T}
_
T{
\f[V]{display}\f[R]
T}@T{
The name of a monitor
T}@T{
Text
T}@T{
-
T}
T{
\f[V]{brightness}\f[R]
T}@T{
The brightness of a monitor
T}@T{
Number
T}@T{
%
T}
T{
\f[V]{brightness_icon}\f[R]
T}@T{
A static icon
T}@T{
Icon
T}@T{
-
T}
T{
\f[V]{resolution}\f[R]
T}@T{
The resolution of a monitor
T}@T{
Text
T}@T{
-
T}
T{
\f[V]{res_icon}\f[R]
T}@T{
A static icon
T}@T{
Icon
T}@T{
-
T}
.TE
.SS Deprecated options
.PP
.TS
tab(@);
l l l l.
T{
Key
T}@T{
Values
T}@T{
Required
T}@T{
Default
T}
_
T{
\f[V]icons\f[R]
T}@T{
Show icons for brightness and resolution.
T}@T{
No
T}@T{
\f[V]true\f[R]
T}
T{
\f[V]resolution\f[R]
T}@T{
Shows the screens resolution.
T}@T{
No
T}@T{
\f[V]false\f[R]
T}
.TE
.SS Used Icons
.IP \[bu] 2
\f[V]xrandr\f[R]
.IP \[bu] 2
\f[V]backlight_full\f[R]
.IP \[bu] 2
\f[V]resolution\f[R]
.SS Escaping text
.PP
For blocks where the \f[V]format\f[R] string or \f[V]command\f[R] output
can be configured by the user, you may need to escape any Pango
characters otherwise the block may fail to render (i3) and/or throw
errors to stderr (sway).
.SS List of characters that require escaping
.PP
.TS
tab(@);
l l.
T{
Char
T}@T{
Escaped
T}
_
T{
\f[V]<\f[R]
T}@T{
\f[V]&lt;\f[R]
T}
T{
\f[V]>\f[R]
T}@T{
\f[V]&gt;\f[R]
T}
T{
\f[V]&\f[R]
T}@T{
\f[V]&amp;\f[R]
T}
T{
\f[V]\[aq]\f[R]
T}@T{
\f[V]&#39;\f[R]
T}
.TE
.PP
e.g.
.IP
.nf
\f[C]
[[block]]
block = \[dq]custom\[dq]
# need to escape ampersand
#command = \[dq]echo \[aq]<b>1 &</b>\[aq]\[dq]
# escaped ampersand
command = \[dq]echo \[aq]<b>1 &amp;</b>\[aq]\[dq]
\f[R]
.fi
.SH Formatting
.PP
All blocks that have a \f[V]format\f[R] field can be reformatted by
changing their format strings.
.PP
The field can be set as a string
(\f[V]format = \[dq]{my_format}\[dq]\f[R]) or as a section:
.IP
.nf
\f[C]
[[block]]
block = \[dq]my_block\[dq]
[block.format]
full = \[dq]{my_full_format}\[dq]
short = \[dq]{my_short_format}\[dq]
\f[R]
.fi
.PP
Your \f[V]i3\f[R] or \f[V]sway\f[R] will switch all blocks over to the
\f[V]short\f[R] variant whenever there isn\[cq]t enough space on your
screen for the \f[V]full\f[R] status bar.
.SS Syntax
.PP
The syntax for placeholders is
.IP
.nf
\f[C]
{<name>[:[0]<min width>][\[ha]<max width>][;[ ][_]<min prefix>][*[_]<unit>][#<bar max value>]}
\f[R]
.fi
.SS \f[V]<name>\f[R]
.PP
This is just a name of a placeholder.
Each block that uses formatting will list them under \[lq]Available
Format Keys\[rq] section of their config.
.SS \f[V][0]<min width>\f[R]
.PP
Sets the minimum width of the content (in characters).
If starts with a zero, \f[V]0\f[R] symbol will be used to pad the
content.
A space is used otherwise.
Floats and Integers are shifted to the right, while Strings are to the
left.
Defaults to \f[V]0\f[R] for Strings, \f[V]2\f[R] for Integers and
\f[V]3\f[R] for Floats.
.SS Examples (spaces are shown as `\[sq]' to make the differences more obvious)
.PP
\f[V]\[dq]{var:3}\[dq]\f[R]
.PP
.TS
tab(@);
l l.
T{
The value of \f[V]var\f[R]
T}@T{
Output
T}
_
T{
\f[V]\[dq]abc\[dq]\f[R]
T}@T{
\f[V]\[dq]abc\[dq]\f[R]
T}
T{
\f[V]\[dq]abcde\[dq]\f[R]
T}@T{
\f[V]\[dq]abcde\[dq]\f[R]
T}
T{
\f[V]\[dq]ab\[dq]\f[R]
T}@T{
\f[V]\[dq]ab\[sq]\[dq]\f[R]
T}
T{
\f[V]1\f[R]
T}@T{
\f[V]\[dq]\[sq]\[sq]1\[dq]\f[R]
T}
T{
\f[V]1234\f[R]
T}@T{
\f[V]\[dq]1234\[dq]\f[R]
T}
T{
\f[V]1.0\f[R]
T}@T{
\f[V]\[dq]1.0\[dq]\f[R]
T}
T{
\f[V]12.0\f[R]
T}@T{
\f[V]\[dq]\[sq]12\[dq]\f[R]
T}
T{
\f[V]123.0\f[R]
T}@T{
\f[V]\[dq]123\[dq]\f[R]
T}
T{
\f[V]1234.0\f[R]
T}@T{
\f[V]\[dq]1234\[dq]\f[R]
T}
.TE
.SS \f[V]<max width>\f[R]
.PP
Sets the maximum width of the content (in characters).
Applicable only for Strings.
.SS Examples
.PP
\f[V]\[dq]{var\[ha]3}\[dq]\f[R]
.PP
.TS
tab(@);
l l.
T{
The value of \f[V]var\f[R]
T}@T{
Output
T}
_
T{
\f[V]\[dq]abc\[dq]\f[R]
T}@T{
\f[V]\[dq]abc\[dq]\f[R]
T}
T{
\f[V]\[dq]abcde\[dq]\f[R]
T}@T{
\f[V]\[dq]abc\[dq]\f[R]
T}
T{
\f[V]\[dq]ab\[dq]\f[R]
T}@T{
\f[V]\[dq]ab\[dq]\f[R]
T}
.TE
.SS \f[V][ ][_]<min prefix>\f[R]
.PP
Float values are formatted following engineering
notation (https://en.wikipedia.org/wiki/Engineering_notation).
This option sets the minimal SI prefix to use.
The default value is \f[V]1\f[R] (no prefix) for bytes/bits and
\f[V]n\f[R] (for nano) for everything else.
Possible values are \f[V]n\f[R], \f[V]u\f[R], \f[V]m\f[R], \f[V]1\f[R],
\f[V]K\f[R], \f[V]M\f[R], \f[V]G\f[R] and \f[V]T\f[R].
.PP
Prepend an underscore \f[V]_\f[R] to hide the prefix (i.e.\ don\[cq]t
display it).
.PP
Prepend a space \f[V]\f[R] to add a space between the value and prefix.
.SS Examples
.PP
\f[V]\[dq]{var:3;n}\[dq]\f[R]
.PP
.TS
tab(@);
l l.
T{
The value of \f[V]var\f[R]
T}@T{
Output
T}
_
T{
\f[V]0.0001\f[R]
T}@T{
\[lq]100u\[rq]
T}
T{
\f[V]0.001\f[R]
T}@T{
\[lq]1.0m\[rq]
T}
T{
\f[V]0.01\f[R]
T}@T{
\[rq] 10m\[rq]
T}
T{
\f[V]0.1\f[R]
T}@T{
\[lq]100m\[rq]
T}
T{
\f[V]1.0\f[R]
T}@T{
\[lq]1.0\[rq]
T}
T{
\f[V]12.0\f[R]
T}@T{
\[rq] 12\[rq]
T}
T{
\f[V]123.0\f[R]
T}@T{
\[lq]123\[rq]
T}
T{
\f[V]1234.0\f[R]
T}@T{
\[lq]1.2K\[rq]
T}
.TE
.PP
\f[V]\[dq]{var:3; 1}\[dq]\f[R]
.PP
.TS
tab(@);
l l.
T{
The value of \f[V]var\f[R]
T}@T{
Output
T}
_
T{
\f[V]0.0001\f[R]
T}@T{
\[lq]0.0\[rq]
T}
T{
\f[V]0.001\f[R]
T}@T{
\[lq]0.0\[rq]
T}
T{
\f[V]0.01\f[R]
T}@T{
\[lq]0.0\[rq]
T}
T{
\f[V]0.1\f[R]
T}@T{
\[lq]0.1\[rq]
T}
T{
\f[V]1.0\f[R]
T}@T{
\[lq]1.0\[rq]
T}
T{
\f[V]12.0\f[R]
T}@T{
\[rq] 12 \[rq]
T}
T{
\f[V]123.0\f[R]
T}@T{
\[lq]123\[rq]
T}
T{
\f[V]1234.0\f[R]
T}@T{
\[lq]1.2 K\[rq]
T}
.TE
.PP
\f[V]\[dq]{var:3;_K}\[dq]\f[R]
.PP
.TS
tab(@);
l l.
T{
The value of \f[V]var\f[R]
T}@T{
Output
T}
_
T{
\f[V]1.0\f[R]
T}@T{
\[lq]0.0\[rq]
T}
T{
\f[V]12.0\f[R]
T}@T{
\[lq]0.0\[rq]
T}
T{
\f[V]123.0\f[R]
T}@T{
\[lq]0.1\[rq]
T}
T{
\f[V]1234.0\f[R]
T}@T{
\[lq]1.2\[rq]
T}
T{
\f[V]12345.0\f[R]
T}@T{
\[rq] 12\[rq]
T}
.TE
.SS \f[V][_]<unit>\f[R]
.PP
Some placeholders have a \[lq]unit\[rq].
For example, \f[V]net\f[R] block displays speed in bytes per second by
default.
This option gives ability to convert one units into another.
Ignored for strings.
Prepend the unit with the underscore \f[V]_\f[R] to hide the unit
(i.e.\ don\[cq]t display it).
.SS The list of units
.PP
.TS
tab(@);
l l l.
T{
Unit
T}@T{
Means
T}@T{
Displays
T}
_
T{
B
T}@T{
Bytes
T}@T{
B
T}
T{
b
T}@T{
Bits
T}@T{
b
T}
T{
%
T}@T{
Percents
T}@T{
%
T}
T{
deg
T}@T{
Degrees
T}@T{
\[de]
T}
T{
s
T}@T{
Seconds
T}@T{
s
T}
T{
W
T}@T{
Watts
T}@T{
W
T}
T{
Hz
T}@T{
Hertz
T}@T{
Hz
T}
.TE
.SS Example
.PP
\f[V]\[dq]{speed_down*b}\[dq]\f[R] - show the download speed in bits per
second.
.PP
\f[V]\[dq]{speed_down*_b}\[dq]\f[R] - show the download speed in bits
per second, but hide the \[lq]b\[rq].
.PP
\f[V]\[dq]{speed_down*_}\[dq]\f[R] - show the download speed in it\[cq]s
default units, but hide the units.
.PP
\f[V]\[dq]{speed_down*_b}Bi/s\[dq]\f[R] - show the download in bits per
second, and display the unit as \[lq]Bi/s\[rq] instead of \[lq]b\[rq].
.SS \f[V]<bar max value>\f[R]
.PP
Every numeric placeholder (Integers and Floats) can be drawn as a bar.
This option sets the value to be considered \[lq]100%\[rq].
If this option is set, every other option will be ignored, except for
\f[V]min width\f[R], which will set the length of a bar.
.SS Example
.IP
.nf
\f[C]
[[block]]
block = \[dq]sound\[dq]
format = \[dq]{volume:5#110} {volume:03}\[dq]
\f[R]
.fi
.PP
Here, \f[V]{volume:5#110}\f[R] means \[lq]draw a bar, 5 character long,
with 100% being 110.
.PP
Output: https://imgur.com/a/CCNw04e
.SH THEMES

.PP
The bar can be themed either by specifying a pre-complied theme or
overriding defaults in the configuration.
.PD 0
.P
.PD
We differentiate between themes and icon sets.
.SS Choosing your theme and icon set
.PP
To use a theme or icon set other than the default, add them to your
configuration file like so:
.IP
.nf
\f[C]
theme = \[dq]solarized-dark\[dq]
icons = \[dq]awesome\[dq]
\f[R]
.fi
.PP
NOTE: If you plan on overriding parts of the theme/icon set then you
will need to change your config file like so:
.IP
.nf
\f[C]
[theme]
name = \[dq]solarized-dark\[dq]
[icons]
name = \[dq]awesome\[dq]
\f[R]
.fi
.PP
Both theme and an icon set can be loaded from a separate file.
.IP
.nf
\f[C]
[theme]
file = \[dq]<file>\[dq]
[icons]
file = \[dq]<file_2>\[dq]
\f[R]
.fi
.PP
where \f[V]<file>\f[R] can be either a filename or a full path and will
be checked in this order:
.IP "1." 3
If full path given, then use it as is:
\f[V]/home/foo/custom_theme.toml\f[R]
.IP "2." 3
If filename given, e.g.\ \[lq]custom_theme.toml\[rq], then first check
\f[V]XDG_CONFIG_HOME/i3status-rust/themes\f[R]
.IP "3." 3
Then look for it in \f[V]\[ti]/.local/share/i3status-rust/themes\f[R]
.IP "4." 3
Otherwise look for it in \f[V]/usr/share/i3status-rust/themes\f[R]
.PP
Notes: - In case with icon sets, the file should be in \f[V]icons\f[R]
subdirectory instead of \f[V]themes\f[R].
- You can omit the \f[V].toml\f[R] extension while specifying
\f[V]file\f[R] parameter.
- \f[V]file\f[R] parameter is an alias to \f[V]name\f[R], they are
completely interchangeable.
- All the standard themes are provides in files, so you can take them as
examples of how to write your own themes/icon sets.
.SS Available themes
.IP \[bu] 2
\f[V]plain\f[R] (default)
[IMAGE: plain (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/plain.png)]
.IP \[bu] 2
\f[V]solarized-dark\f[R]
[IMAGE: solarized-dark (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/solarized_dark.png)]
.IP \[bu] 2
\f[V]solarized-light\f[R]
[IMAGE: solarized-light (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/solarized_light.png)]
.IP \[bu] 2
\f[V]slick\f[R]
[IMAGE: slick (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/slick.png)]
.IP \[bu] 2
\f[V]modern\f[R]
[IMAGE: modern (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/modern.png)]
.IP \[bu] 2
\f[V]bad-wolf\f[R]
[IMAGE: bad-wolf (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/bad_wolf.png)]
.IP \[bu] 2
\f[V]gruvbox-light\f[R]
[IMAGE: gruvbox-light (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/gruvbox_light.png)]
.IP \[bu] 2
\f[V]gruvbox-dark\f[R]
[IMAGE: gruvbox-dark (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/gruvbox_dark.png)]
.IP \[bu] 2
\f[V]space-villain\f[R]
[IMAGE: space-villain (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/space_villain.png)]
.IP \[bu] 2
\f[V]native\f[R] (like plain with no background and native separators)
[IMAGE: native (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/native.png)]
.IP \[bu] 2
\f[V]semi-native\f[R] (like native but with background) //TODO add an
image
.IP \[bu] 2
\f[V]nord-dark\f[R] (polar night)
[IMAGE: nord-dark (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/nord-dark.png)]
.IP \[bu] 2
\f[V]dracula\f[R]
[IMAGE: dracula (https://raw.githubusercontent.com/greshake/i3status-rust/master/img/themes/dracula.png)]
.SS Available icon sets
.IP \[bu] 2
\f[V]none\f[R] (default.
Uses text labels instead of icons)
.IP \[bu] 2
\f[V]awesome\f[R] (Font Awesome 4.x)
.IP \[bu] 2
\f[V]awesome5\f[R] (Font Awesome 5.x)
.IP \[bu] 2
\f[V]material\f[R]
.IP \[bu] 2
\f[V]material-nf\f[R] (Any font from Nerd Fonts collection)
.RS
.PP
\f[B]Note\f[R]: In order to use the material icon set, you need a
patched material icons font which can be found
here (https://gist.github.com/draoncc/3c20d8d4262892ccd2e227eefeafa8ef/raw/3e6e12c213fba1ec28aaa26430c3606874754c30/MaterialIcons-Regular-for-inline.ttf).
Make sure to pass it in your i3 configuration bar block.
.RE
.SS Overriding themes and icon sets
.PP
Create a block in the configuration called \f[V]theme\f[R] or
\f[V]icons\f[R] like so:
.IP
.nf
\f[C]
[theme]
name = \[dq]solarized-dark\[dq]
[theme.overrides]
idle_bg = \[dq]#123456\[dq]
idle_fg = \[dq]#abcdef\[dq]

[icons]
name = \[dq]awesome\[dq]
[icons.overrides]
bat = \[dq] | | \[dq]
bat_full = \[dq] |X| \[dq]
bat_charging = \[dq] |\[ha]| \[dq]
bat_discharging = \[dq] |v| \[dq]
\f[R]
.fi
.PP
Example configurations can be found as \f[V]example_theme.toml\f[R] and
\f[V]example_icon.toml\f[R].
.PP
Besides global overrides you may also use per-block overrides using the
\f[V]theme_overrides\f[R] and \f[V]icons_format\f[R] options available
for all blocks.
For example:
.IP
.nf
\f[C]
[[block]]
block = \[dq]cpu\[dq]
icons_format = \[dq]{icon}\[dq] # Remove spaces aroud icons for this block.
[block.theme_overrides]
idle_bg = \[dq]#123456\[dq]
idle_fg = \[dq]#abcdef\[dq]
\f[R]
.fi
.SS Available theme overrides
.PP
All \f[V]bg\f[R] and \f[V]fg\f[R] overrides are html hex color codes
like \f[V]#000000\f[R] or \f[V]#789ABC\f[R].
A fourth byte for alpha (like \f[V]#acbdef42\f[R]) works on some
systems.
\f[V]00\f[R] is transparent, \f[V]FF\f[R] is opaque.
.PP
The tints are added to every second block counting from the right.
They will therefore always brighten the block and never darken it.
The alpha channel, if it works, can also be alternated in the same way.
.PP
Feel free to take a look at the provided color schemes for reference.
.IP \[bu] 2
\f[V]alternating_tint_bg\f[R]
.IP \[bu] 2
\f[V]alternating_tint_fg\f[R]
.IP \[bu] 2
\f[V]critical_bg\f[R]
.IP \[bu] 2
\f[V]critical_fg\f[R]
.IP \[bu] 2
\f[V]good_bg\f[R]
.IP \[bu] 2
\f[V]good_fg\f[R]
.IP \[bu] 2
\f[V]idle_bg\f[R]
.IP \[bu] 2
\f[V]idle_fg\f[R]
.IP \[bu] 2
\f[V]info_bg\f[R]
.IP \[bu] 2
\f[V]info_fg\f[R]
.IP \[bu] 2
\f[V]separator_bg\f[R]
.IP \[bu] 2
\f[V]separator_fg\f[R]
.IP \[bu] 2
\f[V]separator\f[R]
.IP \[bu] 2
\f[V]warning_bg\f[R]
.IP \[bu] 2
\f[V]warning_fg\f[R]
.SS Available icon overrides
.PP
These can be directly set to a string containing the desired unicode
codepoint(s) or use a TOML escape sequence like
\f[V]\[dq]\[rs]uf0f3\[dq]\f[R] for up to 4-nibble codepoints and
\f[V]\[dq]\[rs]U0001f312\[dq]\f[R] for up to 8-nibble codepoints.
.PP
You can find the codepoints in the documentation of the icon font
you\[cq]re using.
.PP
Feel free to take a look at the provided icon mappings for reference.
.IP \[bu] 2
\f[V]backlight_empty\f[R]
.IP \[bu] 2
\f[V]backlight_full\f[R]
.IP \[bu] 2
\f[V]backlight_1\f[R]
.IP \[bu] 2
\f[V]backlight_2\f[R]
.IP \[bu] 2
\f[V]backlight_3\f[R]
.IP \[bu] 2
\f[V]backlight_4\f[R]
.IP \[bu] 2
\f[V]backlight_5\f[R]
.IP \[bu] 2
\f[V]backlight_6\f[R]
.IP \[bu] 2
\f[V]backlight_7\f[R]
.IP \[bu] 2
\f[V]backlight_8\f[R]
.IP \[bu] 2
\f[V]backlight_9\f[R]
.IP \[bu] 2
\f[V]backlight_10\f[R]
.IP \[bu] 2
\f[V]backlight_11\f[R]
.IP \[bu] 2
\f[V]backlight_12\f[R]
.IP \[bu] 2
\f[V]backlight_13\f[R]
.IP \[bu] 2
\f[V]bat_charging\f[R]
.IP \[bu] 2
\f[V]bat_discharging\f[R]
.IP \[bu] 2
\f[V]bat_full\f[R]
.IP \[bu] 2
\f[V]bat\f[R]
.IP \[bu] 2
\f[V]cogs\f[R]
.IP \[bu] 2
\f[V]cpu\f[R]
.IP \[bu] 2
\f[V]gpu\f[R]
.IP \[bu] 2
\f[V]disk_drive\f[R]
.IP \[bu] 2
\f[V]mail\f[R]
.IP \[bu] 2
\f[V]memory_mem\f[R]
.IP \[bu] 2
\f[V]memory_swap\f[R]
.IP \[bu] 2
\f[V]music_next\f[R]
.IP \[bu] 2
\f[V]music_pause\f[R]
.IP \[bu] 2
\f[V]music_play\f[R]
.IP \[bu] 2
\f[V]music_prev\f[R]
.IP \[bu] 2
\f[V]music\f[R]
.IP \[bu] 2
\f[V]net_down\f[R]
.IP \[bu] 2
\f[V]net_up\f[R]
.IP \[bu] 2
\f[V]net_wired\f[R]
.IP \[bu] 2
\f[V]net_wireless\f[R]
.IP \[bu] 2
\f[V]ping\f[R]
.IP \[bu] 2
\f[V]thermometer\f[R]
.IP \[bu] 2
\f[V]time\f[R]
.IP \[bu] 2
\f[V]toggle_off\f[R]
.IP \[bu] 2
\f[V]toggle_on\f[R]
.IP \[bu] 2
\f[V]update\f[R]
.IP \[bu] 2
\f[V]uptime\f[R]
.IP \[bu] 2
\f[V]volume_empty\f[R]
.IP \[bu] 2
\f[V]volume_full\f[R]
.IP \[bu] 2
\f[V]volume_half\f[R]
.IP \[bu] 2
\f[V]volume_muted\f[R]
.IP \[bu] 2
\f[V]weather_clouds\f[R]
.IP \[bu] 2
\f[V]weather_default\f[R]
.IP \[bu] 2
\f[V]weather_rain\f[R]
.IP \[bu] 2
\f[V]weather_snow\f[R]
.IP \[bu] 2
\f[V]weather_sun\f[R]
.IP \[bu] 2
\f[V]weather_thunder\f[R]
.IP \[bu] 2
\f[V]xrandr\f[R]
.SH CONFORMING TO
The JSON output produced by this program and understood by compatible bars is
described at <https://i3wm.org/docs/i3bar-protocol.html> and in
.BR swaybar-protocol (7).
.SH SEE ALSO
.BR i3status (1),
.BR i3bar (1),
.BR sway-bar (5),
.BR swaybar-protocol (7)
